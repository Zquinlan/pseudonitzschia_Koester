nest()%>%
mutate(data = map(data, ~ aov(asin ~ Organism*DOM_fil, .x)%>%
tidy()))%>%
unnest(data)%>%
ungroup()%>%
filter(term != "Residuals")%>%
mutate(FDR = p.adjust(p.value, method = "BH"))%>%
filter(FDR < 0.05)
aov_organism_sigs <- (aov_pvalues%>%
filter(!term == "DOM_fil"))$feature_number%>%
as.factor()%>%
unique()%>%
as.vector()
aov_DOM_fil_sigs <- (aov_pvalues%>%
filter(!term == "Organism"))$feature_number%>%
as.factor()%>%
unique()%>%
as.vector()
aov_all_sigs <- (aov_pvalues)$feature_number%>%
as.factor()%>%
unique()%>%
as.vector()
# STATS RANDOM FOREST -- QUANT Organism ----------------------------------------------
quant_org_rf_prep <- quant_stats%>%  ## Okay so here we are first making the data "tidy"
filter(feature_number %in% aov_organism_sigs)%>%
mutate(asin = as.numeric(asin))%>%
spread(feature_number, asin)%>%
select(-c(Experiment, biological_replicates, DOM_fil, technical_replicates))%>%
mutate(Organism = as.factor(Organism))
names(quant_org_rf_prep) <- make.names(names(quant_org_rf_prep))
quant_rf_org <- randomForest(Organism ~ ., quant_org_rf_prep,
importance = TRUE, proximity = TRUE, nPerm = 10,
ntree = 50000, na.action = na.exclude)
rf_quant_org_mda <- quant_rf_org$importance%>%
as.data.frame()%>%
rownames_to_column("feature")%>%
mutate(mean_decrease_important = case_when(MeanDecreaseAccuracy >= (top_n(., 30, MeanDecreaseAccuracy)%>%
arrange(-MeanDecreaseAccuracy))$MeanDecreaseAccuracy[30]~ "important",
TRUE ~ "not important"),
multiseries_important = case_when(multiseries >= (top_n(., 30, multiseries)%>%
arrange(-multiseries))$multiseries[30]~ "important",
TRUE ~ "not important"),
delicatissima_important = case_when(delicatissima >= (top_n(., 30, delicatissima)%>%
arrange(-delicatissima))$delicatissima[30]~ "important",
TRUE ~ "not important"),
galaxiae_important = case_when(galaxiae >= (top_n(., 30, galaxiae)%>%
arrange(-galaxiae))$galaxiae[30]~ "important",
TRUE ~ "not important"),
hasleana_important = case_when(hasleana >= (top_n(., 30, hasleana)%>%
arrange(-hasleana))$hasleana[30]~ "important",
TRUE ~ "not important"),
subpacifica_important = case_when(subpacifica >= (top_n(., 30, subpacifica)%>%
arrange(-subpacifica))$subpacifica[30]~ "important",
TRUE ~ "not important"))
write_csv(rf_quant_org_mda, "Analyzed/RF_quant_organism.csv")
# STATS RANDOM FOREST -- QUANT unfilfil  -----------------------------------------
quant_dom_rf_prep <- quant_stats%>%  ## Okay so here we are first making the data "tidy"
filter(feature_number %in% aov_DOM_fil_sigs)%>%
mutate(asin = as.numeric(asin))%>%
spread(feature_number, asin)%>%
select(-c(Experiment, biological_replicates, Organism, technical_replicates))%>%
mutate(DOM_fil = as.factor(DOM_fil))
names(quant_dom_rf_prep) <- make.names(names(quant_dom_rf_prep))
quant_rf_dom <- randomForest(DOM_fil ~ ., quant_dom_rf_prep,
importance = TRUE, proximity = TRUE, nPerm = 10,
ntree = 50000, na.action = na.exclude)
rf_quant_dom_mda <- quant_rf_dom$importance%>%
as.data.frame()%>%
rownames_to_column("feature")%>%
mutate(mean_decrease_important = case_when(MeanDecreaseAccuracy >= (top_n(., 30, MeanDecreaseAccuracy)%>%
arrange(-MeanDecreaseAccuracy))$MeanDecreaseAccuracy[30] ~ "important",
TRUE ~ "not important"))
write_csv(rf_quant_dom_mda, "Analyzed/RF_quant_dom.csv")
# STATS RANDOM FOREST -- OTUs ---------------------------------------------
sig_otu <- otu_aov$Taxonomy%>%
as.vector()
otu_rf_df <- otu_stats%>%
filter(Taxonomy %in% sig_otu)%>%
select(-c(reads, ra))%>%
spread(Taxonomy, asin)%>%
separate(sample_name, c("Organism", "biological_replicate"), sep = "_")%>%
select(-biological_replicate)%>%
mutate(Organism = as.factor(Organism))
names(otu_rf_df) <- make.names(names(otu_rf_df))
otu_rf <-   randomForest(Organism ~ ., otu_rf_df,
importance = TRUE, proximity = TRUE, nPerm = 10,
ntree = 50000, na.action = na.exclude)
otu_rf_mda <- otu_rf$importance%>%
as.data.frame()%>%
rownames_to_column("feature")%>%
mutate(mean_decrease_important = case_when(MeanDecreaseAccuracy >= (top_n(., 30, MeanDecreaseAccuracy)%>%
arrange(-MeanDecreaseAccuracy))$MeanDecreaseAccuracy[30]~ "important",
TRUE ~ "not important"),
multiseries_important = case_when(multiseries >= (top_n(., 30, multiseries)%>%
arrange(-multiseries))$multiseries[30]~ "important",
TRUE ~ "not important"),
delicatissima_important = case_when(delicatissima >= (top_n(., 30, delicatissima)%>%
arrange(-delicatissima))$delicatissima[30]~ "important",
TRUE ~ "not important"),
galaxiae_important = case_when(galaxiae >= (top_n(., 30, galaxiae)%>%
arrange(-galaxiae))$galaxiae[30]~ "important",
TRUE ~ "not important"),
hasleana_important = case_when(hasleana >= (top_n(., 30, hasleana)%>%
arrange(-hasleana))$hasleana[30]~ "important",
TRUE ~ "not important"),
subpacifica_important = case_when(subpacifica >= (top_n(., 30, subpacifica)%>%
arrange(-subpacifica))$subpacifica[30]~ "important",
TRUE ~ "not important"))
important_org_otu <- (otu_rf_mda%>%
mutate(feature = gsub("\\.", ";", feature))%>%
top_n(30, MeanDecreaseAccuracy))$feature%>%
unique()%>%
as.vector()
write_csv(otu_rf_mda, "Analyzed/Otu_rf_mda.csv")
# POST-STATS -- MINI Quant Table organism ---------------------------------------------------
important_quant_org <- (rf_quant_org_mda%>%
mutate(feature = gsub("X", "", feature))%>%
filter(MeanDecreaseAccuracy >= mean(MeanDecreaseAccuracy) + sd(MeanDecreaseAccuracy)))$feature%>%
as.vector()
mini_quant_org <-quant_stats%>%
filter(feature_number %in% important_quant_org)%>%
spread(feature_number, asin)
write_csv(mini_quant_org, "Analyzed/mini_quant_org.csv")
# POST-STATS -- Mini Quant Table unfil ------------------------------------------
important_quant_dom <- (rf_quant_dom_mda%>%
mutate(feature = gsub("X", "", feature))%>%
filter(MeanDecreaseAccuracy >= mean(MeanDecreaseAccuracy) + sd(MeanDecreaseAccuracy)))$feature%>%
as.vector()
mini_quant_dom <- quant_stats%>%
filter(feature_number %in% important_quant_dom)%>%
spread(feature_number, asin)
write_csv(mini_quant_dom, "Analyzed/mini_quant_dom.csv")
# POST-STATS -- Mini RF Table OTUs -------------------------------------
important_quant_otu <- (otu_rf_mda%>%
mutate(feature = gsub("X", "", feature))%>%
filter(MeanDecreaseAccuracy >= mean(MeanDecreaseAccuracy) + sd(MeanDecreaseAccuracy)))$feature%>%
as.vector()
mini_quant_otu <- quant_stats%>%
filter(feature_number %in% important_quant_otu)%>%
spread(feature_number, asin)
write_csv(mini_quant_otu, "Analyzed/mini_quant_otu.csv")
# PRE-MATRIX QUANT AND CAT -- Organism ---------------------------------------------
rf_sd <- (rf_quant_org_mda%>%
filter(MeanDecreaseAccuracy >= mean(MeanDecreaseAccuracy) + sd(MeanDecreaseAccuracy))%>%
mutate(feature = gsub("X", "", feature)))$feature%>%
as.vector()
cat_clean_org <- cat_stats%>%
filter(FeatureID %in% rf_sd)%>%
column_to_rownames("FeatureID")%>%
data.matrix(rownames.force = NA)
canopus_available_features_org <- rownames(cat_clean_org)%>% as.vector()
quant_binary_org <- quant_stats%>%  ## Okay so here we are first making the data "tidy"
filter(feature_number %in% canopus_available_features_org)%>%
unite(feature, c("Experiment", "Organism", "biological_replicates", "DOM_fil",
"technical_replicates"), sep = "_")%>%
group_by(feature)%>%
mutate(binary = case_when(asin > 0.01*max(asin) ~ 1,
TRUE ~ 0))%>%
ungroup()%>%
select(-asin)%>%
spread(feature_number, binary)%>%
column_to_rownames("feature")%>%
data.matrix(rownames.force = NA)
# PRE-MATRIX QUANT AND CAT -- DOM_Fil ---------------------------------------------
cat_clean_dom <- cat_stats%>%
filter(FeatureID %in% aov_DOM_fil_sigs)%>%
column_to_rownames("FeatureID")%>%
data.matrix(rownames.force = NA)
canopus_available_features_dom <- rownames(cat_clean_dom)%>% as.vector()
quant_binary_dom <- quant_stats%>%  ## Okay so here we are first making the data "tidy"
filter(feature_number %in% canopus_available_features_dom)%>%
unite(feature, c("Experiment", "Organism", "biological_replicates", "DOM_fil",
"technical_replicates"), sep = "_")%>%
group_by(feature)%>%
mutate(binary = case_when(asin > 0.01*max(asin) ~ 1,
TRUE ~ 0))%>%
ungroup()%>%
select(-asin)%>%
spread(feature_number, binary)%>%
column_to_rownames("feature")%>%
data.matrix(rownames.force = NA)
# MATRIX MULTIPLICATION --  Organism--------------------------------------------
matrix_multiplied_org <- quant_binary_org%*%cat_clean_org%>%
as.data.frame()%>%
rownames_to_column(var = "sample_code")%>%
gather(category, mult, 2:ncol(.))%>%
filter(category != "DBE-O")%>%
mutate(log10 = log10(mult + 1))%>%
select(-mult)%>%
spread(category, log10)
multi_matrix_tidy_org <- matrix_multiplied_org%>%
gather(category, mult, 2:ncol(.))%>%
separate(sample_code, c("Experiment", "Organism", "biological_replicates", "DOM_fil",
"technical_replicates"), sep = "_")
# MATRIX MULTIPLICATION -- DOM_Fil--------------------------------------------
matrix_multiplied_dom <- quant_binary_dom%*%cat_clean_dom%>%
as.data.frame()%>%
rownames_to_column(var = "sample_code")%>%
gather(category, mult, 2:ncol(.))%>%
filter(category != "DBE-O")%>%
mutate(log10 = log10(mult + 1))%>%
select(-mult)%>%
spread(category, log10)
multi_matrix_tidy_dom <- matrix_multiplied_dom%>%
gather(category, mult, 2:ncol(.))%>%
separate(sample_code, c("Experiment", "Organism", "biological_replicates", "DOM_fil",
"technical_replicates"), sep = "_")
# STATS ANOVA -- org matrix -----------------------------------------------
aov_matrix_org <- multi_matrix_tidy_org%>%
group_by(category)%>%
nest()%>%
mutate(data = map(data, ~ aov(mult ~ Organism, .x)%>%
tidy()))%>%
unnest(data)%>%
ungroup()%>%
mutate(FDR = p.adjust(p.value, method = "BH"))%>%
filter(FDR < 0.05)
matrix_aov_org_sig <- aov_matrix_org$category%>%
as.vector()
write_csv(aov_matrix_org, "Analyzed/anova_pvals_matrix_org.csv")
# STATS ANOVA -- dom matrix -----------------------------------------------
aov_matrix_dom <- multi_matrix_tidy_dom%>%
group_by(category)%>%
nest()%>%
mutate(data = map(data, ~ aov(mult ~ DOM_fil, .x)%>%
tidy()))%>%
unnest(data)%>%
ungroup()%>%
mutate(FDR = p.adjust(p.value, method = "BH"))%>%
filter(FDR < 0.05)
matrix_aov_dom_sig <- aov_matrix_dom$category%>%
as.vector()
write_csv(aov_matrix_org, "Analyzed/anova_pvals_matrix_dom.csv")
# STATS RANDOM FOREST -- Matrix  Organism-------------------------------------------
multi_matrix_random_forest_df <- multi_matrix_tidy_org%>%
filter(category %in% matrix_aov_org_sig)%>%
spread(category, mult)%>%
select(c(Organism, 7:ncol(.)))%>%
mutate(Organism = as.factor(Organism))
names(multi_matrix_random_forest_df) <- make.names(names(multi_matrix_random_forest_df))
rf_matrix <- randomForest(Organism ~ ., multi_matrix_random_forest_df,
importance = TRUE, proximity = TRUE, nPerm = 10,
ntree = 50000, na.action = na.exclude)
top30_org <- (rf_matrix$importance%>%
as.data.frame()%>%
rownames_to_column("feature")%>%
top_n(10, MeanDecreaseAccuracy))$feature%>%
as.vector()
rf_matrix_mda_org <- rf_matrix$importance%>%
as.data.frame()%>%
rownames_to_column("feature")%>%
mutate(mean_decrease_important = case_when(feature %like any% top30_org ~ "important",
TRUE ~ "not important"),
multiseries_important = case_when(multiseries >= (top_n(., 10, multiseries)%>%
arrange(-multiseries))$multiseries[10]~ "important",
TRUE ~ "not important"),
delicatissima_important = case_when(delicatissima >= (top_n(., 10, delicatissima)%>%
arrange(-delicatissima))$delicatissima[10]~ "important",
TRUE ~ "not important"),
galaxiae_important = case_when(galaxiae >= (top_n(., 10, galaxiae)%>%
arrange(-galaxiae))$galaxiae[10]~ "important",
TRUE ~ "not important"),
hasleana_important = case_when(hasleana >= (top_n(., 10, hasleana)%>%
arrange(-hasleana))$hasleana[10]~ "important",
TRUE ~ "not important"),
subpacifica_important = case_when(subpacifica >= (top_n(., 10, subpacifica)%>%
arrange(-subpacifica))$subpacifica[10]~ "important",
TRUE ~ "not important"))
write_csv(rf_matrix_mda_org,"./Analyzed/RF_matrix_organism_mda.05.csv")
ggplot(rf_matrix_mda_org, aes(x= reorder(feature, -MeanDecreaseAccuracy), y = MeanDecreaseAccuracy)) +
geom_point(stat = "identity")
# STATS RANDOM FOREST -- Matrix  Fil_Unfil -------------------------------------------
multi_matrix_random_forest_UnfilFil_df <- multi_matrix_tidy_dom%>%
filter(category %in% matrix_aov_dom_sig)%>%
spread(category,mult)%>%
select(c(DOM_fil, 7:ncol(.)))%>%
mutate(DOM_fil = as.factor(DOM_fil))
names(multi_matrix_random_forest_UnfilFil_df) <- make.names(names(multi_matrix_random_forest_UnfilFil_df))
rf_matrix_UnfilFil <- randomForest(DOM_fil ~ ., multi_matrix_random_forest_UnfilFil_df,
importance = TRUE, proximity = TRUE,
ntree = 50000, na.action=na.exclude)
top30_unfil <- (rf_matrix_UnfilFil$importance%>%
as.data.frame()%>%
rownames_to_column("feature")%>%
top_n(15, MeanDecreaseAccuracy))$feature%>%
as.vector()
rf_matrix_UnfilFil_mda <- rf_matrix_UnfilFil$importance%>%
as.data.frame()%>%
rownames_to_column("feature")%>%
mutate(mean_decrease_important = case_when(feature %like any% top30_unfil ~ "important",
TRUE ~ "not important"),
dom_mda_important = case_when(DOM >= (top_n(., 15, DOM)%>%
arrange(-DOM))$DOM[15]~ "important",
TRUE ~ "not important"),
filt_mda_important = case_when(Unfil >= (top_n(., 15, Unfil)%>%
arrange(-Unfil))$Unfil[15]~ "important",
TRUE ~ "not important"))
write_csv(rf_matrix_UnfilFil_mda,"./Analyzed/RF_matrix_UnfilFil_mda.05.csv")
ggplot(rf_matrix_UnfilFil_mda, aes(x= reorder(feature, -MeanDecreaseAccuracy), y = MeanDecreaseAccuracy)) +
geom_point(stat = "identity")
# STATS PERMANOVA - org and unfilfil  ---------------------------------------------------
matrix_permanova_org <- matrix_multiplied_org%>%
gather(category, mult, 2:ncol(.))%>%
mutate(mult = mult +1)%>%
spread(category, mult)%>%
separate(sample_code, c("Experiment", "Organism", "biological_replicates", "DOM_fil",
"technical_replicates"), sep = "_")
permanova_org <- matrix_permanova_org%>%
# column_to_rownames("sample_code")%>%
adonis(.[7:ncol(.)] ~ Organism*DOM_fil, ., perm = 1000, method = "bray", na.rm = TRUE)
permanova_org
matrix_permanova_dom <- matrix_multiplied_dom%>%
gather(category, mult, 2:ncol(.))%>%
mutate(mult = mult +1)%>%
spread(category, mult)%>%
separate(sample_code, c("Experiment", "Organism", "biological_replicates", "DOM_fil",
"technical_replicates"), sep = "_")
permanova_dom <- matrix_permanova_dom%>%
# column_to_rownames("sample_code")%>%
adonis(.[7:ncol(.)] ~ Organism*DOM_fil, ., perm = 1000, method = "bray", na.rm = TRUE)
permanova_dom
# POST-STATS -- mini-matrix organism -----------------------------------------------
important_org_compounds <- (rf_matrix_mda_org%>%
mutate(feature = gsub("X", "", feature))%>%
top_n(30, MeanDecreaseAccuracy))$feature%>%
unique()%>%
as.vector()
mini_matrix_org <- matrix_multiplied_org%>%
gather(feature, val, 2:ncol(.))%>%
mutate(feature = gsub("[[:space:]]", ".", feature))%>%
mutate(feature = gsub("-", ".", feature))%>%
filter(feature %in% important_org_compounds)%>%
spread(feature, val)
write_csv(mini_matrix_org, "Analyzed/mini_matrix_important_org.csv")
View(quant_stats)
View(cat_stats)
?t.test
feature_info <- read_csv("./Raw/Pn_Ex2_MASTERx_elements.csv")%>%
select(feature_number, everything())
feature_info <- read_csv("./Raw/Pn_Ex2_MASTERx_elements.csv")
head(feature_info)
feature_info <- read_csv("./Raw/Pn_Ex2_MASTERx_elements.csv")%>%
rename(feature_number = 1)%>%
select(feature_number, everything())
# STATS - T-TEST Important features ---------------------------------------
feature_info_test <- feature_info%>%
gather(variable, response, 2:ncol(.))%>%
mutate(importance = case_when(feature_number %in% important_org_compounds ~ "important",
TRUE ~ "not"),
importance = as.factor(importance))%>%
group_by(variable)%>%
nest()%>%
mutate(data = map(data, ~ t.test(.x$response ~ importance, alternative = "two.sided")),
p_value = map(data, ~ .x["p.value"][[1]]))%>%
select(-data)%>%
ungroup()%>%
mutate(p_value = as.numeric(p_value),
FDR = p.adjust(p_value, method = "BH"))
# STATS - T-TEST Important features ---------------------------------------
feature_info_test <- feature_info%>%
gather(variable, response, 2:ncol(.))%>%
mutate(importance = case_when(feature_number %in% important_org_compounds ~ "important",
TRUE ~ "not"),
importance = as.factor(importance))%>%
group_by(variable)%>%
nest()%>%
mutate(data = map(data, ~ t.test(.x$response ~ .$importance, alternative = "two.sided")),
p_value = map(data, ~ .x["p.value"][[1]]))%>%
select(-data)%>%
ungroup()%>%
mutate(p_value = as.numeric(p_value),
FDR = p.adjust(p_value, method = "BH"))
# STATS - T-TEST Important features ---------------------------------------
feature_info_test <- feature_info%>%
gather(variable, response, 2:ncol(.))%>%
mutate(importance = case_when(feature_number %in% important_org_compounds ~ "important",
TRUE ~ "not"),
importance = as.factor(importance))%>%
group_by(variable)%>%
nest()%>%
mutate(data = map(data, ~ t.test(.x$response ~ .x$importance, alternative = "two.sided")),
p_value = map(data, ~ .x["p.value"][[1]]))%>%
select(-data)%>%
ungroup()%>%
mutate(p_value = as.numeric(p_value),
FDR = p.adjust(p_value, method = "BH"))
# STATS - T-TEST Important features ---------------------------------------
feature_info_test <- feature_info%>%
gather(variable, response, 2:ncol(.))%>%
mutate(importance = case_when(feature_number %in% important_org_compounds ~ "important",
TRUE ~ "not"),
importance = as.factor(importance))
View(feature_info)
View(feature_info_test)
# STATS - T-TEST Important features ---------------------------------------
feature_info_test <- feature_info%>%
gather(variable, response, 2:ncol(.))%>%
mutate(importance = case_when(feature_number %in% important_quant_org ~ "important",
TRUE ~ "not"),
importance = as.factor(importance))%>%
group_by(variable)%>%
nest()%>%
mutate(data = map(data, ~ t.test(.x$response ~ .x$importance, alternative = "two.sided")),
p_value = map(data, ~ .x["p.value"][[1]]))%>%
select(-data)%>%
ungroup()%>%
mutate(p_value = as.numeric(p_value),
FDR = p.adjust(p_value, method = "BH"))
View(feature_info_test)
## Script Written by Zach Quinlan 06/19/19
# Re-organization of DORCIERR_FCM_fDOM.R because it needs to be cleaner 07/15/2019
# Only working on daytime exudation and remineralization
# Rewritten with changes to RR3 starting pipeline 10/11/2019
# 16s rRNA amplicon seque3nce data added in a upaded 10/18/2019
# Added in ClassyFire annotations from Inchi_keys 10/07/2019
# This has been rewritten for the new pipeline 12/18/2019
# LOADING -- packages -------------------------------------------------------
#Data mungering
library(tidyverse)
library(data.table)
library(DescTools)
library(broom)
library(readxl)
library(multcomp)
library(CHNOSZ)
library(furrr)
library(future)
library(biclustermd)
library(webchem)
library(classyfireR)
library(randomForest)
library(ggpubr)
#PCoA, PERMANOVA
library(vegan)
library(ape)
#Visualizations
library(wesanderson)
library(RColorBrewer)
library(gplots)
library(gtable)
#Defining functions and removing issues with overlapping function calls
map <- purrr::map
select <- dplyr::select
tidy <- broom::tidy
rename <- dplyr::rename
zscore <- function(x) {
(x-mean(x, na.rm = TRUE))/sd(x, na.rm = TRUE)
}
# CORES -- setting processors available -----------------------------------
##Only used if future_mapping
# num_cores <- availableCores() -1
# don't murder your compututer and save your self a core
# this is the parellel planning step (changes global env so this is plan for all parellel
# work unless specificed otherwise)
# plan(multiprocess, workers = num_cores) #defaults to sequential process, multiprocess is one option for parellel
# LOADING -- dataframes  ------------------------------------------------------
## FCM and fDOM data
dorc_fcm_fdom <- read_xlsx("~/Documents/GitHub/DORCIERR/data/raw/DOC_fDOM_FCM/DORCIERR_fDOM_FCM.xlsx")%>%
rename(sample_name =`Sample Name of DORCIERR_FCM_Final`)%>%
rename('DayNight' = 'Experiment')%>%
rename(Organism = 'Organsim')%>%
mutate(Organism = case_when(Organism == "Water" ~ "Water control",
TRUE ~ as.character(Organism)))
#DOC data
moorea_doc <- read_xlsx("~/Documents/GitHub/DORCIERR/data/raw/DOC_fDOM_FCM/MO17_ExpSummary_DOC.2018.04.04.xlsx")%>%
dplyr::select(1:2)%>%
rename(sample_name = 1)%>%
rename(DOC = 2)
# True hits and analog hits are exported CSVs from GNPS
# True hits are more strictly matched to the library
true_hits <- read_tsv("~/Documents/GitHub/DORCIERR/data/raw/metabolomics/Library-hits.tsv")%>%
rename("feature_number" = '#Scan#')
analog_hits <- read_tsv("~/Documents/GitHub/DORCIERR/data/raw/metabolomics/Analog-hits.tsv")%>%
rename("feature_number" = '#Scan#')
# Node info includes networking information about each feature
node_info <- read_tsv("~/Documents/GitHub/DORCIERR/data/raw/metabolomics/Node_info.tsv")%>%
rename('feature_number' = 'cluster index',
'network' = 'componentindex')
csi_finger_id <- read_tsv("~/Documents/GitHub/DORCIERR/data/raw/metabolomics/summary_csi_fingerid.tsv")%>%
rename(feature_number = experimentName)
# Canopus tries to classify each feature
canopus_anotations <- read_csv("~/Documents/GitHub/DORCIERR/data/raw/metabolomics/Canopus_classes.csv")
chemont_anotations <- read_csv("~/Documents/GitHub/DORCIERR/data/raw/metabolomics/categories.canopus.strings.nelsonMarch2019.CSV")%>%
rename('canopus_annotation' = 'name')
# Sirius and Zodiac both try to assign molecular formulas to all the features
sirius_zodiac_anotations <- read_csv("~/Documents/GitHub/DORCIERR/data/raw/metabolomics/SIRIUS_Zodiac_converted.csv")%>%
rename(feature_number = 1)%>%
dplyr::select(-c(14:ncol(.)))
# Feature table has all features found within the experiments and blanks
# The columns need to be changed to the actual experiment sample codes
# Feature_table_raw is the raw export from MZMine
feature_table_raw <- read_csv("~/Documents/GitHub/DORCIERR/data/raw/metabolomics/Morrea_Feayures-Table_all_Gap-Filled5.csv")%>%
rename('feature_number' = 'row ID')
ms_sample_codes <- read_csv("~/Documents/GitHub/DORCIERR/data/raw/metabolomics/Mo'orea 2017 Mass spec sample codes - Sheet1.csv")%>%
rename('run_code' = 'Sample ID',
'sample_code' = 'Sample Name')
# 16s rRNA sequences
microbe_abundance_raw <- read_tsv("~/Documents/GitHub/DORCIERR/data/raw/microbes/MCR2017.16S.Nelson.Pipeline.October2019/abundance_table_100.shared.tsv")
microbe_taxonomy <- read_tsv("~/Documents/GitHub/DORCIERR/data/raw/microbes/MCR2017.16S.Nelson.Pipeline.October2019/annotations_100.taxonomy.tsv")
# NAP
nap_df <- read_tsv("~/Documents/GitHub/DORCIERR/data/raw/metabolomics/moorea2017_NAP.tsv")%>%
rename("feature_number" = "cluster.index")
inchikey_df <- read_csv("~/Documents/SDSU/Moorea_2017/csi_inchikey.csv")%>%
mutate(feature_number = as.character(feature_number))
View(true_hits)
View(true_hits$INCHI)
View(true_hits%>% filter(feature_number == "7103"))
View(analog_hits%>% filter(feature_number == "7103"))
View(csi_finger_id)
View(csi_finger_id%>% filter(feature_number == "7103"))
head(canopus_anotations)
head(sirius_zodiac_anotations)
