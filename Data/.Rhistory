<<<<<<< HEAD
group_by(sample_code)%>%
mutate(ra = xic/sum(xic),
chl_norm = ra/chl,
asin = asin(sqrt(chl_norm)))
cyto_exp2_dom <- cyto_base%>%
group_by(DOM_fil, feature_number)%>%
select(-c('chl', 'xic', 'asin', 'ra'))%>%
filter(Experiment == "Exp2")%>%
summarize_if(is.numeric, mean, na.rm = TRUE)%>%
spread(DOM_fil, chl_norm)%>%
select(-4)
cyto_exp2_org <- cyto_base%>%
group_by(Organism, DOM_fil, feature_number)%>%
select(-c('chl', 'xic', 'asin', 'ra'))%>%
filter(Experiment == "Exp2")%>%
unite(sample, c(Organism, DOM_fil), sep = "_")%>%
spread(sample, chl_norm)%>%
summarize_if(is.numeric, mean, na.rm = TRUE)
cyto_exp2_org2 <- cyto_base%>%
group_by(Organism, feature_number)%>%
select(-c('chl', 'xic', 'asin', 'ra'))%>%
filter(Experiment == "Exp2")%>%
unite(sample, c(Organism), sep = "_")%>%
spread(sample, chl_norm)%>%
summarize_if(is.numeric, mean, na.rm = TRUE)
cyto_exp1_org2 <- cyto_base%>%
group_by(Organism, feature_number)%>%
select(-c('chl', 'xic', 'asin', 'ra'))%>%
filter(Experiment == "Exp1")%>%
unite(sample, c(Experiment, Organism), sep = "_")%>%
spread(sample, chl_norm)%>%
summarize_if(is.numeric, mean, na.rm = TRUE)
cyto_piers <- cyto_base%>%
group_by(Organism, biological_replicates, feature_number)%>%
select(-c('chl', 'xic', 'asin', 'chl_norm'))%>%
filter(Experiment == "Piers")%>%
unite(sample, c(Organism, biological_replicates), sep = "_")%>%
spread(sample, ra)%>%
summarize_if(is.numeric, mean, na.rm = TRUE)
cyto_CCE <- cyto_base%>%
group_by(Organism, biological_replicates, feature_number)%>%
select(-c('chl', 'xic', 'asin', 'chl_norm'))%>%
filter(Experiment == "CCE-P1706")%>%
unite(sample, c(Organism, biological_replicates), sep = "_")%>%
spread(sample, ra)%>%
summarize_if(is.numeric, mean, na.rm = TRUE)
cyto_piers_mean <- cyto_base%>%
group_by(feature_number)%>%
select(-c('chl', 'xic', 'asin', 'chl_norm'))%>%
filter(Experiment == "Piers")%>%
summarize_if(is.numeric, mean, na.rm = TRUE)%>%
rename(mean_piers = 2)
cyto_CCE_mean <- cyto_base%>%
group_by(feature_number)%>%
select(-c('chl', 'xic', 'asin', 'chl_norm'))%>%
filter(Experiment == "CCE-P1706")%>%
summarize_if(is.numeric, mean, na.rm = TRUE)%>%
rename(mean_CCE = 2)
cyto_xic_sum <- cyto_base%>%
group_by(feature_number)%>%
select(-c('chl', 'ra', 'asin', 'chl_norm'))%>%
filter(Experiment == "Exp2")%>%
summarize_if(is.numeric, sum, na.rm = TRUE)%>%
rename(sum_xic_exp2 = 2)
cyto_xic_sum_env <- cyto_base%>%
group_by(feature_number)%>%
select(-c('chl', 'ra', 'asin', 'chl_norm'))%>%
filter(Experiment != "Exp1")%>%
summarize_if(is.numeric, sum, na.rm = TRUE)%>%
rename(sum_xic_exp2env = 2)
cyto_full <- cyto_exp2_org%>%
full_join(cyto_exp2_org2, by = "feature_number")%>%
full_join(cyto_exp2_dom, by = "feature_number")%>%
full_join(cyto_exp1_org2, by = "feature_number")%>%
full_join(cyto_piers, by = "feature_number")%>%
full_join(cyto_piers_mean, by = "feature_number")%>%
full_join(cyto_CCE, by = "feature_number")%>%
full_join(cyto_CCE_mean, by = "feature_number")%>%
full_join(cyto_xic_sum, by = "feature_number")%>%
full_join(cyto_xic_sum_env, by = "feature_number")
write_csv(cyto_full, "./Analyzed/cyto_node_table.csv")
# VISUALIZATION -- VENN DIAGRAM -------------------------------------------
env_compare <- cyto_base%>%
filter(Experiment != "Exp1",
Experiment != "Exp2")%>%
select(-c('chl', 'ra', 'asin', 'chl_norm',"Experiment", "Organism",
"biological_replicates", "DOM_fil",
"technical_replicates"))%>%
filter(feature_number %in% important_quant_org)%>%
group_by(feature_number)%>%
filter(sum(xic) != 0)%>%
ungroup()%>%
spread(sample_code, xic)
length(important_quant_org)
length(env_compare$feature_number)
# VISUALIZATION -- PCoA org and unfilfil -------------------------------------------------
##Quant all
pcoa_quant <- quant_stats%>%
unite(sample, c("Experiment", "Organism", "biological_replicates", "DOM_fil", "technical_replicates"), sep = "_")%>%
spread(feature_number, asin)%>%
column_to_rownames("sample")%>%
vegdist(na.rm = TRUE)%>%
pcoa()
pcoa_quant$values[1:10,]%>%
as.data.frame()%>%
rownames_to_column("Axis")%>%
mutate(axis = as.numeric(Axis))%>%
ggplot(aes(reorder(Axis, axis), Relative_eig, label = round(Relative_eig, digits = 3))) +
geom_bar(stat = "identity") +
geom_text(size = 3, color = "red", vjust = -0.5)
## otu
pcoa_otu <- otu_stats%>%
select(-c(reads, ra))%>%
spread(Taxonomy, asin)%>%
column_to_rownames("sample_name")%>%
vegdist(na.rm = TRUE)%>%
pcoa()
pcoa_otu$values[1:10,]%>%
as.data.frame()%>%
rownames_to_column("Axis")%>%
mutate(axis = as.numeric(Axis))%>%
ggplot(aes(reorder(Axis, axis), Relative_eig, label = round(Relative_eig, digits = 3))) +
geom_bar(stat = "identity") +
geom_text(size = 3, color = "red", vjust = -0.5)
## Organism Matrix
pcoa_org <- matrix_multiplied_org%>%
gather(cat, val, 2:ncol(.))%>%
mutate(val = val+ min(val) +1)%>%
spread(cat, val)%>%
column_to_rownames("sample_code")%>%
vegdist(na.rm = TRUE)%>%
pcoa()
pcoa_org$values[1:10,]%>%
as.data.frame()%>%
rownames_to_column("Axis")%>%
mutate(axis = as.numeric(Axis))%>%
ggplot(aes(reorder(Axis, axis), Relative_eig, label = round(Relative_eig, digits = 3))) +
geom_bar(stat = "identity") +
geom_text(size = 3, color = "red", vjust = -0.5)
## Unfil vs Fil matrix
pcoa_dom <- matrix_multiplied_dom%>%
gather(cat, val, 2:ncol(.))%>%
mutate(val = val+ min(val) +1)%>%
spread(cat, val)%>%
column_to_rownames("sample_code")%>%
vegdist(na.rm = TRUE)%>%
pcoa()
pcoa_dom$values[1:10,]%>%
as.data.frame()%>%
rownames_to_column("Axis")%>%
mutate(axis = as.numeric(Axis))%>%
ggplot(aes(reorder(Axis, axis), Relative_eig, label = round(Relative_eig, digits = 3))) +
geom_bar(stat = "identity") +
geom_text(size = 3, color = "red", vjust = -0.5)
#Settings for Pcoas
pcoa_settings <- function(x) {
ggplot(x, aes(Axis.1, Axis.2, color = Organism, shape = DOM_fil)) +
geom_point(stat = "identity") +
scale_color_manual(values = c("#75d648", "#ae2da9", "#2d67c7", "#f27304", "#64d6f7")) +
scale_shape_manual(values=c(1, 16))+
theme(panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
axis.title.x = element_text(size=14, face="bold"),
axis.title.y = element_text(size=14, face="bold"),
axis.text.x = element_text(face="bold", size=14),
axis.text.y = element_text(face="bold", size=14),
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
legend.background = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent"), # get rid of legend panel bg
axis.line = element_line(color="black"))
}
## Plotting PCoAs
pdf("Plots/PCoA_all.pdf", width = 7, height = 5)
pcoa_quant$vectors%>%
as.data.frame()%>%
rownames_to_column("sample_code")%>%
separate(sample_code, c("Experiment", "Organism", "biological_replicates", "DOM_fil",
"technical_replicates"), sep = "_")%>%
pcoa_settings() +
ylab(str_c("Axis 2", " (", round(pcoa_quant$values$Relative_eig[2], digits = 4)*100, "%)", sep = "")) +
xlab(str_c("Axis 1", " (", round(pcoa_quant$values$Relative_eig[1], digits = 4)*100, "%)", sep = "")) +
ggtitle("quant all")
pcoa_otu$vectors%>%
as.data.frame()%>%
rownames_to_column("sample_code")%>%
separate(sample_code, c("Organism", "biological_replicates"), sep = "_")%>%
ggplot(aes(Axis.1, Axis.2, color = Organism)) +
geom_point(stat = "identity", aes(size = 0.2)) +
scale_color_manual(values = c("#75d648", "#ae2da9", "#2d67c7", "#f27304", "#64d6f7")) +
theme(panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
axis.title.x = element_text(size=14, face="bold"),
axis.title.y = element_text(size=14, face="bold"),
axis.text.x = element_text(face="bold", size=14),
axis.text.y = element_text(face="bold", size=14),
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
legend.background = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent"), # get rid of legend panel bg
axis.line = element_line(color="black"))+
ylab(str_c("Axis 2", " (", round(pcoa_otu$values$Relative_eig[2], digits = 4)*100, "%)", sep = "")) +
xlab(str_c("Axis 1", " (", round(pcoa_otu$values$Relative_eig[1], digits = 4)*100, "%)", sep = "")) +
ggtitle("otus")
pcoa_org$vectors%>%
as.data.frame()%>%
rownames_to_column("sample_code")%>%
separate(sample_code, c("Experiment", "Organism", "biological_replicates", "DOM_fil",
"technical_replicates"), sep = "_")%>%
pcoa_settings() +
ylab(str_c("Axis 2", " (", round(pcoa_org$values$Relative_eig[2], digits = 4)*100, "%)", sep = "")) +
xlab(str_c("Axis 1", " (", round(pcoa_org$values$Relative_eig[1], digits = 4)*100, "%)", sep = "")) +
ggtitle("Organism 0.05")
pcoa_dom$vectors%>%
as.data.frame()%>%
rownames_to_column("sample_code")%>%
separate(sample_code, c("Experiment", "Organism", "biological_replicates", "DOM_fil",
"technical_replicates"), sep = "_")%>%
pcoa_settings() +
ylab(str_c("Axis 2", " (", round(pcoa_dom$values$Relative_eig[2], digits = 4)*100, "%)", sep = "")) +
xlab(str_c("Axis 1", " (", round(pcoa_dom$values$Relative_eig[1], digits = 4)*100, "%)", sep = "")) +
ggtitle("UnfilFil 0.05")
dev.off()
# VISUALIZATION -- Mean Decrease Accuracy scatterplots -------------------------
mda_theme <- theme(panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
axis.title.x = element_text(size=14, face="bold"),
axis.title.y = element_text(size=14, face="bold"),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
legend.background = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent"), # get rid of legend panel bg
axis.line = element_line(color="black"))
pdf("./Plots/Mean_Decrease_Accuracy.pdf", height = 5, width = 7)
ggplot(rf_quant_org_mda, aes(x= reorder(feature, -MeanDecreaseAccuracy), y = MeanDecreaseAccuracy)) +
geom_point(stat = "identity") +
ggtitle("Organism QUANT Mean Decrease Accuracy pval = 0.05") +
xlab("Features (decreasing mda)") +
ylab("Mean Decrease Accuracy") +
geom_hline(yintercept = (mean(rf_quant_org_mda$MeanDecreaseAccuracy + sd(rf_quant_org_mda$MeanDecreaseAccuracy))),
col = "red") +
mda_theme
ggplot(rf_quant_dom_mda, aes(x= reorder(feature, -MeanDecreaseAccuracy), y = MeanDecreaseAccuracy)) +
geom_point(stat = "identity") +
ggtitle("DOM Quant Mean Decrease Accuracy pval = 0.05") +
xlab("Features (decreasing mda)") +
ylab("Mean Decrease Accuracy") +
geom_hline(yintercept = (top_n(rf_quant_dom_mda, 30, MeanDecreaseAccuracy)%>%
arrange(-MeanDecreaseAccuracy))$MeanDecreaseAccuracy[30],
col = "red") +
mda_theme
ggplot(otu_rf_mda, aes(x= reorder(feature, -MeanDecreaseAccuracy), y = MeanDecreaseAccuracy)) +
geom_point(stat = "identity") +
ggtitle("OTU Mean Decrease Accuracy pval = 0.05") +
xlab("Features (decreasing mda)") +
ylab("Mean Decrease Accuracy") +
geom_hline(yintercept = (top_n(otu_rf_mda, 30, MeanDecreaseAccuracy)%>%
arrange(-MeanDecreaseAccuracy))$MeanDecreaseAccuracy[30],
col = "red") +
mda_theme
ggplot(rf_matrix_mda_org, aes(x= reorder(feature, -MeanDecreaseAccuracy), y = MeanDecreaseAccuracy)) +
geom_point(stat = "identity") +
ggtitle("Organism Matrix Mean Decrease Accuracy pval = 0.05") +
xlab("Features (decreasing mda)") +
ylab("Mean Decrease Accuracy") +
geom_hline(yintercept = (top_n(rf_matrix_mda_org, 30, MeanDecreaseAccuracy)%>%
arrange(-MeanDecreaseAccuracy))$MeanDecreaseAccuracy[30],
col = "red") +
mda_theme
ggplot(rf_matrix_UnfilFil_mda, aes(x= reorder(feature, -MeanDecreaseAccuracy), y = MeanDecreaseAccuracy)) +
geom_point(stat = "identity") +
ggtitle("FilUnfil Matrix Mean Decrease Accuracy pval = 0.05") +
xlab("Features (decreasing mda)") +
ylab("Mean Decrease Accuracy") +
geom_hline(yintercept = (top_n(rf_matrix_UnfilFil_mda, 30, MeanDecreaseAccuracy)%>%
arrange(-MeanDecreaseAccuracy))$MeanDecreaseAccuracy[30],
col = "red") +
mda_theme
dev.off()
# CLEANING -- Stats dataframes --------------------------------------------------------------------------------
## Cleaning all of the data
quant_stats <- quant_df%>%
gather(sample_code, xic, 2:ncol(.))%>%
separate(sample_code, c("Experiment", "Organism",
"biological_replicates", "DOM_fil",
"technical_replicates"), sep = "_", remove = FALSE)%>%
filter(Experiment == "Exp2")%>%
unite(sample_code, c("Organism", "biological_replicates"), sep = "_", remove = FALSE)%>%
left_join(chl%>%
mutate(sample_code = gsub("Pn_", "Pn-", sample_code)), by = "sample_code")%>%
select(-sample_code)%>%
filter(Organism != 'MediaBlank')%>%
unite(sample_code, c("Experiment", "Organism",
"biological_replicates", "DOM_fil",
"technical_replicates"), sep = "_")%>%
group_by(sample_code)%>%
mutate(ra = xic/sum(xic),
chl_norm = ra/chl,
asin = asin(sqrt(chl_norm)))%>%
ungroup()%>%
select(-c(ra, xic,  chl_norm, chl))%>%
# group_by(feature_number)%>%
# filter(sum(.$asin) != 0)%>%
separate(sample_code, c("Experiment", "Organism",
"biological_replicates", "DOM_fil",
"technical_replicates"), sep = "_")
quant_df <- quant_blanks_env%>%
select(-c(culture_blanks, culture_samples))%>%
full_join(quant_culture_blanks_removed, by = "feature_number")%>%
flag_transient()%>%
filter(transient_features == "real")%>%
select(-transient_features)
# CLEANING -- Removing Blanks ---------------------------------------------
field_blanks <- (metadata_quant%>%
filter(SampleType == "blank_extraction"))$filename%>%
as.vector()
# CLEANING -- Removing Blanks ---------------------------------------------
field_blanks <- (metadata_quant%>%
filter(SampleType == "blank_extraction"))$sample_code%>%
as.vector()
culture_blanks <- (metadata_quant%>%
filter(SampleType == "blank_culturemedia",
sample_code != "Media_Blank_100mL"))$sample_code%>%
as.vector()
culture_samples <- (metadata_quant%>%
filter(ATTRIBUTE_Experiment == "Exp2_Culture"))$sample_code%>%
as.vector()
quant_blanks_env <- quant_raw%>%
flag_background(blank_columns =  match(names(select(., Blank_Fieldtrip.mzML, CCE_P1706_1_MSMS.mzXML, CCE_P1706_2_MSMS.mzXML)), names(.)))%>%
filter(background_features == "real")%>%
select(-background_features)
quant_blanks_env <- quant_raw%>%
flag_background(blank_columns =  match(names(select(., Blank_Fieldtrip, CCE_P1706_1, CCE_P1706_2)), names(.)))%>%
filter(background_features == "real")%>%
select(-background_features)
quant_blanks_env <- quant_raw%>%
flag_background(blank_columns =  match(names(select(., Piers_PPLBlank_D_Unfil_I, CCE_P1706_1, CCE_P1706_2)), names(.)))%>%
filter(background_features == "real")%>%
select(-background_features)
quant_blanks_env <- quant_raw%>%
flag_background(blank_columns =  match(names(select(., Piers_PPLBlank_D_Unfil_I, CCE-P1706_PPLBlank_D_Unfil_I,
CCE-P1706_PPLBlank_D_Unfil_II)), names(.)))%>%
filter(background_features == "real")%>%
select(-background_features)
quant_blanks_env <- quant_raw%>%
flag_background(blank_columns =  match(names(select(., Piers_PPLBlank_D_Unfil_I, `CCE-P1706_PPLBlank_D_Unfil_I`,
`CCE-P1706_PPLBlank_D_Unfil_II`)), names(.)))%>%
filter(background_features == "real")%>%
select(-background_features)
quant_culture_blanks_removed <- quant_blanks_env%>%
select(c(feature_number, culture_blanks, culture_samples))%>%
flag_background(blank_columns = match(names(select(., culture_blanks)), names(.)))%>%
filter(background_features == "real")%>%
select(-background_features)
quant_df <- quant_blanks_env%>%
select(-c(culture_blanks, culture_samples))%>%
full_join(quant_culture_blanks_removed, by = "feature_number")%>%
flag_transient()%>%
filter(transient_features == "real")%>%
select(-transient_features)
# CLEANING -- Stats dataframes --------------------------------------------------------------------------------
## Cleaning all of the data
quant_stats <- quant_df%>%
gather(sample_code, xic, 2:ncol(.))%>%
separate(sample_code, c("Experiment", "Organism",
"biological_replicates", "DOM_fil",
"technical_replicates"), sep = "_", remove = FALSE)%>%
filter(Experiment == "Exp2")%>%
unite(sample_code, c("Organism", "biological_replicates"), sep = "_", remove = FALSE)%>%
left_join(chl%>%
mutate(sample_code = gsub("Pn_", "Pn-", sample_code)), by = "sample_code")%>%
select(-sample_code)%>%
filter(Organism != 'MediaBlank')%>%
unite(sample_code, c("Experiment", "Organism",
"biological_replicates", "DOM_fil",
"technical_replicates"), sep = "_")%>%
group_by(sample_code)%>%
mutate(ra = xic/sum(xic),
chl_norm = ra/chl,
asin = asin(sqrt(chl_norm)))%>%
ungroup()%>%
select(-c(ra, xic,  chl_norm, chl))%>%
# group_by(feature_number)%>%
# filter(sum(.$asin) != 0)%>%
separate(sample_code, c("Experiment", "Organism",
"biological_replicates", "DOM_fil",
"technical_replicates"), sep = "_")
cat_stats <- cat_df%>%
select(1, 25:ncol(.))%>%
gather(cat, prob, 2:ncol(.))%>%
group_by(cat)%>%
filter(max(prob) > 0.5)%>%
ungroup()%>%
mutate(asin = asin(sqrt(prob)))%>%
select(-prob)%>%
spread(cat, asin)%>%
left_join(cat_df[1:24], by = "FeatureID")
# CLEANING -- OTU table -------------------------------------------------------------------
otu_clean <- otu_df%>%
select(-c(1:2))%>%
rownames_to_column("otu_number")%>%
gather(sample_code, reads, 3:ncol(.))%>%
left_join(otu_samples, ., by = "sample_code")%>%
separate(sample_name, c("Experiment", "Organism", "biological_replicate"), sep = "_")%>%
unite(sample_name, c("Organism", "biological_replicate"), sep = "_")%>%
separate(taxonomy, c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "OTU"), sep = ";")%>%
mutate(Class = case_when(Class %like any% c("%uncultured%", "%unclassified%", "%unidentified%") ~ "unclassified",
TRUE ~ as.character(Class)),
Order = case_when(Class == "unclassified" ~ "",
TRUE ~ as.character(Order)),
Family = case_when(Class == "unclassified" ~ "",
TRUE ~ as.character(Family)),
Genus = case_when(Class == "unclassified" ~ "",
TRUE ~ as.character(Genus)),
OTU = case_when(Class == "unclassified" ~ "",
TRUE ~ as.character(OTU)),
Order = case_when(Order %like any% c("%uncultured%", "%unclassified%", "%unidentified%") ~ "unclassified",
TRUE ~ as.character(Order)),
Family = case_when(Order == "unclassified" ~ "",
TRUE ~ as.character(Family)),
Genus = case_when(Order == "unclassified" ~ "",
TRUE ~ as.character(Genus)),
OTU = case_when(Order == "unclassified" ~ "",
TRUE ~ as.character(OTU)),
Family = case_when(Family %like any% c("%uncultured%", "%unclassified%", "%unidentified%") ~ "unclassified",
TRUE ~ as.character(Family)),
Genus = case_when(Family == "unclassified" ~ "",
TRUE ~ as.character(Genus)),
OTU = case_when(Family == "unclassified" ~ "",
TRUE ~ as.character(OTU)),
Genus = case_when(Genus %like any% c("%uncultured%", "%unclassified%", "%unidentified%") ~ "unclassified",
TRUE ~ as.character(Genus)),
OTU = case_when(Genus == "unclassified" ~ "",
OTU %like any% c("%uncultured%", "%unclassified%", "%unidentified%") ~ "sp",
TRUE ~ as.character(OTU)))%>%
unite(Taxonomy, c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "otu_number"), sep = ";")%>%
select(-c(OTU, Experiment, sample_code))
# PRE-STATS -- OTU TABLE --------------------------------------------------
## Making the stats dataframes for OTU, family and classes
otu_stats <- otu_clean%>%
group_by(sample_name)%>%
mutate(ra = reads/sum(reads),
asin = asin(sqrt(ra)))%>%
group_by(Taxonomy)%>%
filter(sum(asin) != 0)%>%
ungroup()
family_stats <- otu_clean%>%
separate(Taxonomy, c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "otu_number"), sep = ";")%>%
select(-c("Genus", "otu_number"))%>%
unite(Taxonomy, c("Kingdom", "Phylum", "Class", "Order", "Family"), sep = ";")%>%
group_by(sample_name,Taxonomy)%>%
summarize_if(is.numeric, sum)%>%
ungroup()%>%
group_by(sample_name)%>%
mutate(ra = reads/sum(reads),
asin = asin(sqrt(ra)))%>%
group_by(Taxonomy)%>%
filter(sum(asin) != 0)%>%
ungroup()
# STATS -- SET SEED -------------------------------------------------------
set.seed(295034) # Setting the seed before we do any stats
# STATS ANOVA -- OTUs One-way -----------------------------------------------------
otu_aov <- otu_stats%>%
separate(sample_name, c("Organism", "Replicate"), sep = "_")%>%
mutate(Organism = as.factor(Organism))%>%
group_by(Taxonomy)%>%
nest()%>%
mutate(data = map(data, ~ aov(asin ~ Organism, .x)%>%
tidy()))%>%
unnest(data)%>%
ungroup()%>%
filter(term != "Residuals")%>%
mutate(FDR = p.adjust(p.value, method = "BH"))%>%
filter(FDR < 0.05)
# STATS ANOVA -- Quant Two-way -------------------------------------------------------------------
aov_pvalues <- quant_stats%>%
group_by(feature_number)%>%
nest()%>%
mutate(data = map(data, ~ aov(asin ~ Organism*DOM_fil, .x)%>%
tidy()))%>%
unnest(data)%>%
ungroup()%>%
filter(term != "Residuals")%>%
mutate(FDR = p.adjust(p.value, method = "BH"))%>%
filter(FDR < 0.05)
aov_organism_sigs <- (aov_pvalues%>%
filter(!term == "DOM_fil"))$feature_number%>%
as.factor()%>%
unique()%>%
as.vector()
aov_DOM_fil_sigs <- (aov_pvalues%>%
filter(!term == "Organism"))$feature_number%>%
as.factor()%>%
unique()%>%
as.vector()
aov_all_sigs <- (aov_pvalues)$feature_number%>%
as.factor()%>%
unique()%>%
as.vector()
# STATS RANDOM FOREST -- QUANT Organism ----------------------------------------------
quant_org_rf_prep <- quant_stats%>%  ## Okay so here we are first making the data "tidy"
filter(feature_number %in% aov_organism_sigs)%>%
mutate(asin = as.numeric(asin))%>%
spread(feature_number, asin)%>%
select(-c(Experiment, biological_replicates, DOM_fil, technical_replicates))%>%
mutate(Organism = as.factor(Organism))
names(quant_org_rf_prep) <- make.names(names(quant_org_rf_prep))
quant_rf_org <- randomForest(Organism ~ ., quant_org_rf_prep,
importance = TRUE, proximity = TRUE, nPerm = 10,
ntree = 50000, na.action = na.exclude)
=======
#Data mungering
library(tidyverse)
library(data.table)
library(DescTools)
library(broom)
library(readxl)
library(multcomp)
library(CHNOSZ)
library(furrr)
library(future)
library(biclustermd)
library(webchem)
library(classyfireR)
library(wesanderson)
library(RColorBrewer)
library(gplots)
library(gtable)
#Defining functions and removing issues with overlapping function calls
map <- purrr::map
select <- dplyr::select
tidy <- broom::tidy
rename <- dplyr::rename
LibIDs <- read_tsv("./Raw/Pn_LibIds0.7.tsv")%>%
gather(col, val, 2:ncol(.))%>%
mutate(var = "library")%>%
unite(col, c(col, var), sep = "_")%>%
spread(col, val)
setwd("~/zach_r/pseudonitzschia_Koester/Data")
LibIDs <- read_tsv("./Raw/Pn_LibIds0.7.tsv")%>%
gather(col, val, 2:ncol(.))%>%
mutate(var = "library")%>%
unite(col, c(col, var), sep = "_")%>%
spread(col, val)
Analogs <- read_tsv("./Raw/Pn_Analogs0.8.tsv")%>%
gather(col, val, 2:ncol(.))%>%
mutate(var = "analog")%>%
unite(col, c(col, var), sep = "_")%>%
spread(col, val)
##combine Inchi
###if LibId keep, if not use analog
LibIDs_combined <- LibIDs%>%
full_join(Analogs, by = "#Scan#")%>%
replace_na(list(INCHI_library = "N/A"))%>%
replace_na(list(INCHI_analog = "N/A"))%>%
mutate(inchi_combined = case_when(INCHI_library != "N/A" ~ INCHI_library,
INCHI_library == "N/A" ~ INCHI_analog))
#if it doesn't start with "InChi=" add "InChi=" to fix the few wrong Inchi which would fail in Classyfire
LibIDs_combined_inchifixed <- LibIDs_combined%>%
mutate(inchi_combined = case_when(!inchi_combined %like% "InChI=%" ~ paste("InChI=", inchi_combined, sep = ""),
TRUE ~ as.character(inchi_combined)))
write_csv(LibIDs_combined_inchifixed,"Pn_GNPS_combined_test.csv")
#convert inchi of combined table to inchikey for Classyfire
Combined_classyfire <- LibIDs_combined_inchifixed%>%
select(`#Scan#`, inchi_combined)%>%
filter(inchi_combined != "InChI=N/A")%>%
group_by(`#Scan#`)%>%
filter(row_number(inchi_combined) == 1 )%>%
mutate(inchi_key = cs_inchi_inchikey(inchi_combined))%>%
ungroup()
write_csv(Combined_classyfire,"Pn_GNPS_combined_Inchikeys.csv")
View(Combined_classyfire)
write_csv(Combined_classyfire,"Pn_GNPS_combined_Inchikeys.csv")
write_csv(Combined_classyfire,"./Raw/Pn_GNPS_combined_Inchikeys.csv")
>>>>>>> 4c19aac9a1d79c8deadaf6b62afae87f622aa62f
