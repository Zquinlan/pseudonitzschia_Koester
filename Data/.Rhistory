matrix_aov_dom_sig <- aov_matrix_dom$category%>%
as.vector()
write_csv(aov_matrix_org, "Analyzed/anova_pvals_matrix_dom.csv")
# STATS RANDOM FOREST -- Matrix  Organism-------------------------------------------
multi_matrix_random_forest_df <- multi_matrix_tidy_org%>%
filter(category %in% matrix_aov_org_sig)%>%
spread(category, mult)%>%
select(c(Organism, 7:ncol(.)))%>%
mutate(Organism = as.factor(Organism))
names(multi_matrix_random_forest_df) <- make.names(names(multi_matrix_random_forest_df))
rf_matrix <- randomForest(Organism ~ ., multi_matrix_random_forest_df,
importance = TRUE, proximity = TRUE, nPerm = 10,
ntree = 50000, na.action = na.exclude)
top30_org <- (rf_matrix$importance%>%
as.data.frame()%>%
rownames_to_column("feature")%>%
top_n(10, MeanDecreaseAccuracy))$feature%>%
as.vector()
top30_org <- (rf_matrix$importance%>%
as.data.frame()%>%
rownames_to_column("feature")%>%
top_n(30, MeanDecreaseAccuracy))$feature%>%
as.vector()
rf_matrix_mda_org <- rf_matrix$importance%>%
as.data.frame()%>%
rownames_to_column("feature")%>%
mutate(mean_decrease_important = case_when(feature %like any% top30_org ~ "important",
TRUE ~ "not important"),
multiseries_important = case_when(`Pn-multiseries` >= (top_n(., 10, `Pn-multiseries`)%>%
arrange(-`Pn-multiseries`))$`Pn-multiseries`[10]~ "important",
TRUE ~ "not important"),
delicatissima_important = case_when(`Pn-delicatissima` >= (top_n(., 10, `Pn-delicatissima`)%>%
arrange(-`Pn-delicatissima`))$`Pn-delicatissima`[10]~ "important",
TRUE ~ "not important"),
galaxiae_important = case_when(`Pn-galaxiae` >= (top_n(., 10, `Pn-galaxiae`)%>%
arrange(-`Pn-galaxiae`))$`Pn-galaxiae`[10]~ "important",
TRUE ~ "not important"),
hasleana_important = case_when(`Pn-hasleana` >= (top_n(., 10, `Pn-hasleana`)%>%
arrange(-`Pn-hasleana`))$`Pn-hasleana`[10]~ "important",
TRUE ~ "not important"),
subpacifica_important = case_when(`Pn-subpacifica` >= (top_n(., 10, `Pn-subpacifica`)%>%
arrange(-`Pn-subpacifica`))$`Pn-subpacifica`[10]~ "important",
TRUE ~ "not important"))
write_csv(rf_matrix_mda_org,"./Analyzed/RF_matrix_organism_mda.05.csv")
ggplot(rf_matrix_mda_org, aes(x= reorder(feature, -MeanDecreaseAccuracy), y = MeanDecreaseAccuracy)) +
geom_point(stat = "identity")
# STATS RANDOM FOREST -- Matrix  Fil_Unfil -------------------------------------------
multi_matrix_random_forest_UnfilFil_df <- multi_matrix_tidy_dom%>%
filter(category %in% matrix_aov_dom_sig)%>%
spread(category,mult)%>%
select(c(DOM_fil, 7:ncol(.)))%>%
mutate(DOM_fil = as.factor(DOM_fil))
names(multi_matrix_random_forest_UnfilFil_df) <- make.names(names(multi_matrix_random_forest_UnfilFil_df))
rf_matrix_UnfilFil <- randomForest(DOM_fil ~ ., multi_matrix_random_forest_UnfilFil_df,
importance = TRUE, proximity = TRUE,
ntree = 50000, na.action=na.exclude)
top30_unfil <- (rf_matrix_UnfilFil$importance%>%
as.data.frame()%>%
rownames_to_column("feature")%>%
top_n(30, MeanDecreaseAccuracy))$feature%>%
as.vector()
rf_matrix_UnfilFil_mda <- rf_matrix_UnfilFil$importance%>%
as.data.frame()%>%
rownames_to_column("feature")%>%
mutate(mean_decrease_important = case_when(feature %like any% top30_unfil ~ "important",
TRUE ~ "not important"),
dom_mda_important = case_when(DOM >= (top_n(., 15, DOM)%>%
arrange(-DOM))$DOM[15]~ "important",
TRUE ~ "not important"),
filt_mda_important = case_when(Unfil >= (top_n(., 15, Unfil)%>%
arrange(-Unfil))$Unfil[15]~ "important",
TRUE ~ "not important"))
write_csv(rf_matrix_UnfilFil_mda,"./Analyzed/RF_matrix_UnfilFil_mda.05.csv")
ggplot(rf_matrix_UnfilFil_mda, aes(x= reorder(feature, -MeanDecreaseAccuracy), y = MeanDecreaseAccuracy)) +
geom_point(stat = "identity")
# STATS PERMANOVA - org and unfilfil  ---------------------------------------------------
matrix_permanova_org <- matrix_multiplied_org%>%
gather(category, mult, 2:ncol(.))%>%
mutate(mult = mult +1)%>%
spread(category, mult)%>%
separate(sample_code, c("Experiment", "Organism", "biological_replicates", "DOM_fil",
"technical_replicates"), sep = "_")
View(matrix_permanova_org)
View(cat_clean_dom)
View(cat_clean_org)
# STATS PERMANOVA - org and unfilfil  ---------------------------------------------------
matrix_permanova_org <- matrix_multiplied_org%>%
gather(category, mult, 2:ncol(.))%>%
mutate(mult = mult +1)%>%
spread(category, mult)%>%
separate(sample_code, c("Experiment", "Organism", "biological_replicates", "DOM_fil",
"technical_replicates"), sep = "_")
permanova_org <- matrix_permanova_org%>%
# column_to_rownames("sample_code")%>%
adonis(.[7:ncol(.)] ~ Organism*DOM_fil, ., perm = 1000, method = "bray", na.rm = TRUE)
permanova_org
matrix_permanova_dom <- matrix_multiplied_dom%>%
gather(category, mult, 2:ncol(.))%>%
mutate(mult = mult +1)%>%
spread(category, mult)%>%
separate(sample_code, c("Experiment", "Organism", "biological_replicates", "DOM_fil",
"technical_replicates"), sep = "_")
permanova_dom <- matrix_permanova_dom%>%
# column_to_rownames("sample_code")%>%
adonis(.[7:ncol(.)] ~ Organism*DOM_fil, ., perm = 1000, method = "bray", na.rm = TRUE)
permanova_dom
# POST-STATS -- mini-matrix organism -----------------------------------------------
important_org_compounds <- (rf_matrix_mda_org%>%
mutate(feature = gsub("X", "", feature))%>%
top_n(30, MeanDecreaseAccuracy))$feature%>%
unique()%>%
as.vector()
mini_matrix_org <- matrix_multiplied_org%>%
gather(feature, val, 2:ncol(.))%>%
mutate(feature = gsub("[[:space:]]", ".", feature))%>%
mutate(feature = gsub("-", ".", feature))%>%
filter(feature %in% important_org_compounds)%>%
spread(feature, val)
write_csv(mini_matrix_org, "Analyzed/mini_matrix_important_org.csv")
# STATS - T-TEST Important features org ---------------------------------------
feature_info_test <- feature_info%>%
gather(variable, response, 2:ncol(.))%>%
mutate(importance = case_when(feature_number %in% important_quant_org ~ "important",
TRUE ~ "not"),
importance = as.factor(importance))%>%
group_by(variable)%>%
nest()%>%
mutate(data = map(data, ~ t.test(.x$response ~ .x$importance, alternative = "greater")),
p_value = map(data, ~ .x["p.value"][[1]]))%>%
select(-data)%>%
ungroup()%>%
mutate(p_value = as.numeric(p_value),
FDR = p.adjust(p_value, method = "BH"))
write_csv(feature_info_test, "Analyzed/Ttest_elements_org.csv")
# STATS - T-TEST Important features DOM ---------------------------------------
feature_info_test_dom <- feature_info%>%
gather(variable, response, 2:ncol(.))%>%
mutate(importance = case_when(feature_number %in% important_quant_dom ~ "important",
TRUE ~ "not"),
importance = as.factor(importance))%>%
group_by(variable)%>%
nest()%>%
mutate(data = map(data, ~ t.test(.x$response ~ .x$importance, alternative = "greater")),
p_value = map(data, ~ .x["p.value"][[1]]))%>%
select(-data)%>%
ungroup()%>%
mutate(p_value = as.numeric(p_value),
FDR = p.adjust(p_value, method = "BH"))
write_csv(feature_info_test_dom, "Analyzed/Ttest_elements_dom.csv")
# STATS Correlation analysis ----------------------------------------------
## Correlation analysis
## Doing this between OTU and multiplied matrix
correlation_matrix <- matrix_multiplied_org%>%
gather(compound, val, 2:ncol(.))%>%
mutate(compound = gsub("[[:space:]]", ".", compound))%>%
mutate(compound = gsub("-", ".", compound))%>%
filter(compound %in% important_org_compounds)%>%
spread(compound, val)%>%
separate(sample_code, c("Experiment", "Organism", "biological_replicates", "DOM_fil",
"technical_replicates"), sep = "_")%>%
select(-c(Experiment, technical_replicates))%>%
group_by(Organism, biological_replicates, DOM_fil)%>%
summarize_if(is.numeric, mean)%>%
ungroup()
View(correlation_matrix)
correlation_microbe <- otu_stats%>%
filter(sample_code_16S %like% "%Exp2%")%>%
select(-c(reads, ra))%>%
spread(Taxonomy, asin)
View(correlation_microbe)
View(otu_stats)
View(correlation_microbe)
correlation_table <- correlation_matrix%>%
unite(sample_name, c("Organism", "biological_replicates"), sep = "_")%>%
group_by(DOM_fil)%>%
nest()%>%
mutate(data = map(data, ~ left_join(.x, correlation_microbe, by = "sample_name")%>%
gather(microbe, microbe_asin, contains(";"))%>%
gather(category, category_asin, 2:31)))
correlation_table <- correlation_matrix%>%
unite(sample_name, c("Organism", "biological_replicates"), sep = "_")%>%
group_by(DOM_fil)
View(correlation_table)
correlation_table <- correlation_matrix%>%
unite(sample_name, c("Organism", "biological_replicates"), sep = "_")%>%
group_by(DOM_fil)%>%
nest()%>%
mutate(data = map(data, ~ left_join(.x, correlation_microbe, by = "sample_name")%>%
gather(microbe, microbe_asin, contains(";"))%>%
gather(category, category_asin, 2:31)))
correlation_table <- correlation_matrix%>%
unite(sample_name, c("Organism", "biological_replicates"), sep = "_")%>%
group_by(DOM_fil)%>%
nest()%>%
mutate(data = map(data, ~ left_join(.x, correlation_microbe, by = "sample_code_16")%>%
gather(microbe, microbe_asin, contains(";"))%>%
gather(category, category_asin, 2:31)))
correlation_table <- correlation_matrix%>%
unite(sample_name, c("Organism", "biological_replicates"), sep = "_")%>%
group_by(DOM_fil)%>%
nest()%>%
mutate(data = map(data, ~ left_join(.x, correlation_microbe, by = "sample_code")%>%
gather(microbe, microbe_asin, contains(";"))%>%
gather(category, category_asin, 2:31)))
correlation_table <- correlation_matrix%>%
unite(sample_name, c("Organism", "biological_replicates"), sep = "_")%>%
group_by(DOM_fil)%>%
nest()%>%
mutate(data = map(data, ~ left_join(.x, correlation_microbe, by = "sample_name")%>%
gather(microbe, microbe_asin, contains(";"))%>%
gather(category, category_asin, 2:31)))
correlation_pvals <- correlation_table%>%
unnest(data)%>%
ungroup()%>%
group_by(DOM_fil, microbe, category)%>%
filter(sum(category_asin) > 0)%>%
nest()%>%
mutate(corr = map(data, ~ cor.test(.x$category_asin, .x$microbe_asin, method = "pearson")%>%
broom::tidy()))%>%
dplyr::select(-data)%>%
unnest(corr)%>%
ungroup()%>%
mutate(FDR = p.adjust(p.value, method = "BH"))
write_csv(correlation_pvals, "Analyzed/correlation_analysis.csv")
# POST-STATS -- mini-matrix unfilfil -----------------------------------------------
important_unfil_compounds <- (rf_matrix_UnfilFil_mda%>%
mutate(feature = gsub("X", "", feature))%>%
top_n(30, MeanDecreaseAccuracy))$feature%>%
unique()%>%
as.vector()
mini_matrix_dom <- matrix_multiplied_dom%>%
gather(feature, val, 2:ncol(.))%>%
mutate(feature = gsub("[[:space:]]", ".", feature))%>%
filter(feature %in% important_unfil_compounds)%>%
spread(feature, val)
write_csv(mini_matrix_dom, "Analyzed/mini_matrix_important_dom.csv")
# POST STATS -- matrix for HC ---------------------------------------------
otu_hc <- otu_stats%>%
filter(Taxonomy %in% important_org_otu)%>%
group_by(Taxonomy)%>%
mutate(zscore = (asin - mean(asin))/sd(asin))%>%
ungroup()%>%
select(-c(reads, ra, asin))%>%
spread(Taxonomy, zscore)%>%
rename("sample_code" = "sample_name")
# POST STATS -- matrix for HC ---------------------------------------------
otu_hc <- otu_stats%>%
filter(Taxonomy %in% important_org_otu)%>%
group_by(Taxonomy)%>%
mutate(zscore = (asin - mean(asin))/sd(asin))%>%
ungroup()%>%
select(-c(reads, ra, asin))%>%
spread(Taxonomy, zscore)%>%
rename("sample_code" = "sample_name")
compound_org_hc <- mini_matrix_org%>%
gather(category, asin, 2:ncol(.))%>%
separate(sample_code, c("Experiment", "Organism",
"biological_replicate", "DOM_fil",
"technical_replicate"), sep = "_")%>%
group_by(category)%>%
mutate(zscore = (asin - mean(asin))/sd(asin))%>%
ungroup()%>%
group_by(category, Organism, biological_replicate, DOM_fil)%>%
select(-technical_replicate)%>%
summarize_if(is.numeric, mean)%>%
ungroup()%>%
filter(DOM_fil == "DOM")%>%
select(-c(asin, DOM_fil))%>%
unite(sample, c("Organism", "biological_replicate"), sep = "_")%>%
spread(category, zscore)
compound_dom_hc <- mini_matrix_dom%>%
gather(category, asin, 2:ncol(.))%>%
separate(sample_code, c("Experiment", "Organism",
"biological_replicate", "DOM_fil",
"technical_replicate"), sep = "_")%>%
group_by(category)%>%
mutate(zscore = (asin - mean(asin))/sd(asin))%>%
ungroup()%>%
group_by(category, Organism, biological_replicate, DOM_fil)%>%
select(-technical_replicate)%>%
summarize_if(is.numeric, mean)%>%
ungroup()%>%
select(-c(asin))%>%
unite(sample, c("Organism", "biological_replicate", "DOM_fil"), sep = "_")%>%
spread(category, zscore)
feature_org_hc <- mini_quant_org%>%
gather(feature_number, asin, 6:ncol(.))%>%
group_by(feature_number)%>%
mutate(zscore = (asin - mean(asin))/sd(asin))%>%
ungroup()%>%
group_by(feature_number, Organism, biological_replicates, DOM_fil)%>%
select(-technical_replicates)%>%
summarize_if(is.numeric, mean)%>%
ungroup()%>%
filter(DOM_fil == "DOM")%>%
select(-c(asin, DOM_fil))%>%
left_join(lib_id%>%
select(feature_number, Compound_Name), by = "feature_number")%>%
unite(feature, c(feature_number, Compound_Name), sep = "_")%>%
unite(sample, c("Organism", "biological_replicates"), sep = "_")%>%
spread(feature, zscore)
feature_dom_hc <- mini_quant_dom%>%
gather(feature_number, asin, 6:ncol(.))%>%
group_by(feature_number)%>%
mutate(zscore = (asin - mean(asin))/sd(asin))%>%
ungroup()%>%
group_by(feature_number, Organism, biological_replicates, DOM_fil)%>%
select(-technical_replicates)%>%
summarize_if(is.numeric, mean)%>%
ungroup()%>%
select(-c(asin))%>%
unite(sample, c("Organism", "biological_replicates", "DOM_fil"), sep = "_")%>%
left_join(lib_id%>%
select(feature_number, Compound_Name), by = "feature_number")%>%
unite(feature, c(feature_number, Compound_Name), sep = "_")%>%
spread(feature, zscore)
write_csv(compound_org_hc, "Analyzed/compound_org_hc.csv")
write_csv(compound_dom_hc, "Analyzed/compound_dom_hc.csv")
write_csv(feature_org_hc, "Analyzed/feature_org_hc.csv")
write_csv(feature_dom_hc, "Analyzed/feature_dom_hc.csv")
# VISUALIZATION -- PCoA org and unfilfil -------------------------------------------------
##Quant all
pcoa_quant <- quant_stats%>%
unite(sample, c("Experiment", "Organism", "biological_replicates", "DOM_fil", "technical_replicates"), sep = "_")%>%
spread(feature_number, asin)%>%
column_to_rownames("sample")%>%
vegdist(na.rm = TRUE)%>%
pcoa()
pcoa_quant$values[1:10,]%>%
as.data.frame()%>%
rownames_to_column("Axis")%>%
mutate(axis = as.numeric(Axis))%>%
ggplot(aes(reorder(Axis, axis), Relative_eig, label = round(Relative_eig, digits = 3))) +
geom_bar(stat = "identity") +
geom_text(size = 3, color = "red", vjust = -0.5)
## otu
pcoa_otu <- otu_stats%>%
separate(sample_code_16S, c("Experiment", "Organism", "biological_replicates",
"technical_replicates"), sep = "_")%>%
filter(Experiment != 'CCE-P1706',
Experiment != 'Piers')%>%
unite(sample_name, c("Experiment", "Organism", "biological_replicates",
"technical_replicates"), sep = "_")%>%
select(-c(reads, ra))%>%
spread(Taxonomy, asin)%>%
column_to_rownames("sample_name")%>%
vegdist(na.rm = TRUE)%>%
pcoa()
pcoa_otu$values[1:10,]%>%
as.data.frame()%>%
rownames_to_column("Axis")%>%
mutate(axis = as.numeric(Axis))%>%
ggplot(aes(reorder(Axis, axis), Relative_eig, label = round(Relative_eig, digits = 3))) +
geom_bar(stat = "identity") +
geom_text(size = 3, color = "red", vjust = -0.5)
## Organism Matrix
pcoa_org <- matrix_multiplied_org%>%
gather(cat, val, 2:ncol(.))%>%
mutate(val = val+ min(val) +1)%>%
spread(cat, val)%>%
column_to_rownames("sample_code")%>%
vegdist(na.rm = TRUE)%>%
pcoa()
pcoa_org$values[1:10,]%>%
as.data.frame()%>%
rownames_to_column("Axis")%>%
mutate(axis = as.numeric(Axis))%>%
ggplot(aes(reorder(Axis, axis), Relative_eig, label = round(Relative_eig, digits = 3))) +
geom_bar(stat = "identity") +
geom_text(size = 3, color = "red", vjust = -0.5)
## Unfil vs Fil matrix
pcoa_dom <- matrix_multiplied_dom%>%
gather(cat, val, 2:ncol(.))%>%
mutate(val = val+ min(val) +1)%>%
spread(cat, val)%>%
column_to_rownames("sample_code")%>%
vegdist(na.rm = TRUE)%>%
pcoa()
pcoa_dom$values[1:10,]%>%
as.data.frame()%>%
rownames_to_column("Axis")%>%
mutate(axis = as.numeric(Axis))%>%
ggplot(aes(reorder(Axis, axis), Relative_eig, label = round(Relative_eig, digits = 3))) +
geom_bar(stat = "identity") +
geom_text(size = 3, color = "red", vjust = -0.5)
#Settings for Pcoas
pcoa_settings <- function(x) {
ggplot(x, aes(Axis.1, Axis.2, color = Organism, shape = DOM_fil)) +
geom_point(stat = "identity") +
scale_color_manual(values = c("#75d648", "#ae2da9", "#2d67c7", "#f27304", "#64d6f7")) +
scale_shape_manual(values=c(1, 16))+
theme(panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
axis.title.x = element_text(size=14, face="bold"),
axis.title.y = element_text(size=14, face="bold"),
axis.text.x = element_text(face="bold", size=14),
axis.text.y = element_text(face="bold", size=14),
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
legend.background = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent"), # get rid of legend panel bg
axis.line = element_line(color="black"))
}
## Plotting PCoAs
pdf("Plots/PCoA_all.pdf", width = 7, height = 5)
pcoa_quant$vectors%>%
as.data.frame()%>%
rownames_to_column("sample_code")%>%
separate(sample_code, c("Experiment", "Organism", "biological_replicates", "DOM_fil",
"technical_replicates"), sep = "_")%>%
pcoa_settings() +
ylab(str_c("Axis 2", " (", round(pcoa_quant$values$Relative_eig[2], digits = 4)*100, "%)", sep = "")) +
xlab(str_c("Axis 1", " (", round(pcoa_quant$values$Relative_eig[1], digits = 4)*100, "%)", sep = "")) +
ggtitle("quant all")
pcoa_otu$vectors%>%
as.data.frame()%>%
rownames_to_column("sample_code")%>%
separate(sample_code, c("Experiment", "Organism", "biological_replicates", "technical_replicates"), sep = "_")%>%
ggplot(aes(Axis.1, Axis.2, color = Organism, shape = Experiment)) +
geom_point(stat = "identity", aes(size = 0.2)) +
scale_color_manual(values = c("#75d648", "#ae2da9", "#2d67c7", "#f27304", "#64d6f7")) +
theme(panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
axis.title.x = element_text(size=14, face="bold"),
axis.title.y = element_text(size=14, face="bold"),
axis.text.x = element_text(face="bold", size=14),
axis.text.y = element_text(face="bold", size=14),
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
legend.background = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent"), # get rid of legend panel bg
axis.line = element_line(color="black"))+
ylab(str_c("Axis 2", " (", round(pcoa_otu$values$Relative_eig[2], digits = 4)*100, "%)", sep = "")) +
xlab(str_c("Axis 1", " (", round(pcoa_otu$values$Relative_eig[1], digits = 4)*100, "%)", sep = "")) +
ggtitle("otus")
pcoa_org$vectors%>%
as.data.frame()%>%
rownames_to_column("sample_code")%>%
separate(sample_code, c("Experiment", "Organism", "biological_replicates", "DOM_fil",
"technical_replicates"), sep = "_")%>%
pcoa_settings() +
ylab(str_c("Axis 2", " (", round(pcoa_org$values$Relative_eig[2], digits = 4)*100, "%)", sep = "")) +
xlab(str_c("Axis 1", " (", round(pcoa_org$values$Relative_eig[1], digits = 4)*100, "%)", sep = "")) +
ggtitle("Organism 0.05")
pcoa_dom$vectors%>%
as.data.frame()%>%
rownames_to_column("sample_code")%>%
separate(sample_code, c("Experiment", "Organism", "biological_replicates", "DOM_fil",
"technical_replicates"), sep = "_")%>%
pcoa_settings() +
ylab(str_c("Axis 2", " (", round(pcoa_dom$values$Relative_eig[2], digits = 4)*100, "%)", sep = "")) +
xlab(str_c("Axis 1", " (", round(pcoa_dom$values$Relative_eig[1], digits = 4)*100, "%)", sep = "")) +
ggtitle("UnfilFil 0.05")
dev.off()
# VISUALIZATION -- Mean Decrease Accuracy scatterplots -------------------------
mda_theme <- theme(panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
axis.title.x = element_text(size=14, face="bold"),
axis.title.y = element_text(size=14, face="bold"),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
legend.background = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent"), # get rid of legend panel bg
axis.line = element_line(color="black"))
pdf("./Plots/Mean_Decrease_Accuracy.pdf", height = 5, width = 7)
ggplot(rf_quant_org_mda, aes(x= reorder(feature, -MeanDecreaseAccuracy), y = MeanDecreaseAccuracy)) +
geom_point(stat = "identity") +
ggtitle("Organism QUANT Mean Decrease Accuracy pval = 0.05") +
xlab("Features (decreasing mda)") +
ylab("Mean Decrease Accuracy") +
geom_hline(yintercept = (mean(rf_quant_org_mda$MeanDecreaseAccuracy + sd(rf_quant_org_mda$MeanDecreaseAccuracy))),
col = "red") +
mda_theme
ggplot(rf_quant_dom_mda, aes(x= reorder(feature, -MeanDecreaseAccuracy), y = MeanDecreaseAccuracy)) +
geom_point(stat = "identity") +
ggtitle("DOM Quant Mean Decrease Accuracy pval = 0.05") +
xlab("Features (decreasing mda)") +
ylab("Mean Decrease Accuracy") +
geom_hline(yintercept = (top_n(rf_quant_dom_mda, 30, MeanDecreaseAccuracy)%>%
arrange(-MeanDecreaseAccuracy))$MeanDecreaseAccuracy[30],
col = "red") +
mda_theme
ggplot(otu_rf_mda, aes(x= reorder(feature, -MeanDecreaseAccuracy), y = MeanDecreaseAccuracy)) +
geom_point(stat = "identity") +
ggtitle("OTU Mean Decrease Accuracy pval = 0.05") +
xlab("Features (decreasing mda)") +
ylab("Mean Decrease Accuracy") +
geom_hline(yintercept = (top_n(otu_rf_mda, 30, MeanDecreaseAccuracy)%>%
arrange(-MeanDecreaseAccuracy))$MeanDecreaseAccuracy[30],
col = "red") +
mda_theme
ggplot(rf_matrix_mda_org, aes(x= reorder(feature, -MeanDecreaseAccuracy), y = MeanDecreaseAccuracy)) +
geom_point(stat = "identity") +
ggtitle("Organism Matrix Mean Decrease Accuracy pval = 0.05") +
xlab("Features (decreasing mda)") +
ylab("Mean Decrease Accuracy") +
geom_hline(yintercept = (top_n(rf_matrix_mda_org, 30, MeanDecreaseAccuracy)%>%
arrange(-MeanDecreaseAccuracy))$MeanDecreaseAccuracy[30],
col = "red") +
mda_theme
ggplot(rf_matrix_UnfilFil_mda, aes(x= reorder(feature, -MeanDecreaseAccuracy), y = MeanDecreaseAccuracy)) +
geom_point(stat = "identity") +
ggtitle("FilUnfil Matrix Mean Decrease Accuracy pval = 0.05") +
xlab("Features (decreasing mda)") +
ylab("Mean Decrease Accuracy") +
geom_hline(yintercept = (top_n(rf_matrix_UnfilFil_mda, 30, MeanDecreaseAccuracy)%>%
arrange(-MeanDecreaseAccuracy))$MeanDecreaseAccuracy[30],
col = "red") +
mda_theme
dev.off()
