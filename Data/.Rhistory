dom_organism_post_hoc <- dom_stats_wdf%>%
left_join(significant_organism_dom_day[2], ., by = "feature_number")
# PRE-POST-HOC CLEANING -- Timepoint anova --------------------------------------------------
dom_timepoint_post_hoc <- dom_stats_wdf%>%
left_join(significant_Timepoint_dom[2], ., by = "feature_number")
dom_timepoint <- dom_timepoint_post_hoc%>%
group_by(Organism, DayNight, feature_number)%>%
mutate(sum = sum(asin))%>%
filter(!sum == 0)%>%
dplyr::select(-sum)%>%
ungroup()
# PRE-POST-HOC CLEANING -- Microbe Dunnetts and DayNight anova -------------------------------
mic_organism_post_hoc <- microbe_combined%>%
filter(OFGO %in% organism_significant_microbes)%>%
filter(Timepoint == "TF")
daynight_microbe_post_hoc <- microbe_combined%>%
filter(OFGO %in% DayNight_significant_microbes)%>%
filter(Timepoint == "TF")
# STATS POST-HOC -- FCM Tukeys ----------------------------------------------------------
# Tukey growth rates for the first half of the expierment
tukey_model_fcm_th <-aov(fcm_rate_th_t0$log_change_per_hour ~ fcm_rate_th_t0$Organism, data = fcm_rate_th_t0)%>%
TukeyHSD(p.adjust.methods = "BH")
p_values_tukey_fcm_th <- as.data.frame(tukey_model_fcm_th$`fcm_rate_th_t0$Organism`)%>%
rownames_to_column(var = "Organism")%>%
gather(feature_info, value, 2:ncol(.))%>%
filter(feature_info %like% "%p adj%")%>%
filter(value < 0.05)
# Tukey TF FCM
tukey_model_fcm_TF <- aov(fcm_t7$TF ~ fcm_t7$Organism, data = fcm_t7)%>%
TukeyHSD(p.adjust.methods = "BH")
p_values_tukey_fcm_TF <- as.data.frame(tukey_model_fcm_TF$`fcm_t7$Organism`)%>%
rownames_to_column(var = "Organism")%>%
gather(feature_info, value, 2:ncol(.))%>%
filter(feature_info %like% "%p adj%")%>%
filter(value < 0.05)
# STATS POST-HOC â€” Timepoint anovas ---------------------------------------
aov_time <- dom_timepoint%>%
group_by(Organism, feature_number, DayNight)%>%
nest()%>%
mutate(anova = map(data, ~ aov(asin ~ Timepoint, .x)%>%
glance()%>%
dplyr::select(p.value)))%>%
dplyr::select(-data)%>%
unnest(anova)%>%
mutate(FDR = p.adjust(p.value, method = "BH"))
# STATS P-VALUE -- Timepoint anovas --------------------------------------------------------
time_aov_sigs <- aov_time%>%
filter(FDR < 0.05)%>%
unite(combined, c(Organism, feature_number, DayNight), sep = "_", remove = TRUE)%>%
dplyr::select(-p.value)
time_aov_sig_features <- as.vector(time_aov_sigs$combined)
# STATS POST-HOC -- T0, TF, Day and Night Dunnetts -------------------------------------------------------------
organism_order <- as.factor(dom_organism_post_hoc$Organism)%>%
relevel("Water control")%>%
levels()%>%
as.vector()
org_dunnetts_exudates <- dom_organism_post_hoc%>%
group_by(Timepoint, DayNight, feature_number)%>%
mutate(sum = sum(asin))%>%
filter(!sum == 0)%>%
dplyr::select(-sum)%>%
ungroup()%>%
mutate(Organism = factor(Organism))%>%
mutate(Organism = fct_relevel(Organism, organism_order))%>%
group_by(Timepoint, feature_number, DayNight)%>%
nest()%>%
mutate(dunnett = map(data, ~ aov(asin ~ Organism, .x)%>%
glht(linfct = mcp(Organism = "Dunnett"))),
dunnett_summary = map(dunnett, ~summary(.x)%>%
tidy()),
tukey = map(data, ~ aov(asin ~ Organism, .x)
glht(linfct = mcp(Tension = "Tukey"))))
##Doing future_mapping across processors. Seems to take longer when you have a lot of map functions.
# org_dunnetts_exudates <- dom_organism_post_hoc%>%
#   group_by(Timepoint, DayNight, feature_number)%>%
#   mutate(sum = sum(asin))%>%
#   filter(!sum == 0)%>%
#   dplyr::select(-sum)%>%
#   ungroup()%>%
#   mutate(Organism = factor(Organism))%>%
#   mutate(Organism = fct_relevel(Organism, organism_order))%>%
#   group_by(Timepoint, feature_number, DayNight)%>%
#   nest()%>%
#   mutate(dunnett = future_map(data, ~ aov(asin ~ Organism, .x)%>%
#                                 glht(linfct = mcp(Organism = "Dunnett"))),
#          dunnett_summary = future_map(dunnett, ~ summary(.x)%>%
#                                 tidy()),
#          tukey = future_map(data, ~ aov(asin ~ Organism, .x)%>%
#                               glht(linfct = mcp(tension = "Tukey")))) #switched out map with future_map
# STATS P-VALUE -- T0 Dunnetts ----------------------------
dunnets_pvals <- org_dunnetts_exudates%>%
dplyr::select(c(1:3, dunnett_summary))%>%
unnest(dunnett_summary)%>%
dplyr::select(-c(5:8))%>%
mutate(FDR = p.adjust(p.value, method = "BH"))%>%
mutate(lhs = gsub(" - Water control", "", lhs))%>%
unite(combined, c(lhs, feature_number, DayNight), sep = "_")
significant_exudates <- dunnets_pvals%>%
filter(Timepoint == "T0")
significant_accumulites <- dunnets_pvals%>%
filter(Timepoint == "TF")
# STATS POST-HOC -- Day and Night Dunnetts TF -----------------------------
organism_order_micro <- as.factor(mic_organism_post_hoc$Organism)%>%
relevel("Water control")%>%
levels()%>%
as.vector()
dunnett_microbe_pvals <- mic_organism_post_hoc%>%
group_by(DayNight, OFGO)%>%
mutate(sum = sum(asin))%>%
filter(sum != 0)%>%
select(-sum)%>%
mutate(Organism = factor(Organism))%>%
mutate(Organism = fct_relevel(Organism, organism_order_micro))%>%
nest()%>%
mutate(dunnett = map(data, ~ aov(asin ~ Organism, .x)%>%
glht(linfct = mcp(Organism = "Dunnett"))),
dunnett_summary = map(dunnett, ~summary(.x)%>%
tidy()))%>%
select(-c(data,dunnett))%>%
unnest(dunnett_summary)%>%
select(-c(4:7))%>%
mutate(lhs = gsub(" - Water control", "", lhs))%>%
rename("Organism" = "lhs")%>%
mutate(FDR = p.adjust(p.value, method = "BH"))%>%
filter(FDR < 0.05)
# STATS POST-HOC -- DayNight anova grouped by organism --------------------
daynight_microbe_pvals <- mic_organism_post_hoc%>%
group_by(Organism, OFGO)%>%
mutate(sum = sum(asin))%>%
filter(sum != 0)%>%
select(-sum)%>%
nest()%>%
mutate(data = map(data, ~ aov(asin ~ DayNight, .x)%>%
tidy()))%>%
unnest(data)%>%
select(-c(4:7))%>%
filter(term != "Residuals")%>%
mutate(FDR = p.adjust(p.value, method = "BH"))%>%
filter(FDR < 0.05)
# META-STATS -- microbes --------------------------------------------------
dunnett_micro_analysis <- dunnett_microbe_pvals%>%
select(-p.value)%>%
spread(Organism, FDR)%>%
add_column(number_exudate_organisms = rowSums(.[3:ncol(.)] >= 0, na.rm = TRUE))%>%
mutate(microbe_organism = case_when(is.na(CCA) == FALSE &
is.na(Dictyota) &
is.na(Turf) &
is.na(`Pocillopora verrucosa`)  &
is.na(`Porites lobata`) ~ "CCA",
is.na(CCA)  &
is.na(Dictyota) == FALSE &
is.na(Turf) &
is.na(`Pocillopora verrucosa`)  &
is.na(`Porites lobata`) ~ "Dictyota",
is.na(CCA)  &
is.na(Dictyota) &
is.na(Turf) == FALSE &
is.na(`Pocillopora verrucosa`)  &
is.na(`Porites lobata`) ~ "Turf",
is.na(CCA) &
is.na(Dictyota) &
is.na(Turf) &
is.na(`Pocillopora verrucosa`) == FALSE &
is.na(`Porites lobata`) ~ "Pocillopora verrucosa",
is.na(CCA) &
is.na(Dictyota) &
is.na(Turf) &
is.na(`Pocillopora verrucosa`)  &
is.na(`Porites lobata`) == FALSE ~ "Porites lobata",
is.na(`Pocillopora verrucosa`) == FALSE &
is.na(CCA) == FALSE &
is.na(Dictyota) &
is.na(Turf)  |
is.na(`Porites lobata`) == FALSE &
is.na(CCA) == FALSE &
is.na(Dictyota) &
is.na(Turf) ~ "Corraline",
is.na(`Pocillopora verrucosa`) &
is.na(CCA) == FALSE &
is.na(Dictyota) == FALSE &
is.na(`Porites lobata`) |
is.na(CCA) == FALSE &
is.na(Turf) == FALSE &
is.na(`Porites lobata`) &
is.na(`Pocillopora verrucosa`) ~ "Algae",
is.na(`Dictyota`) &
is.na(CCA)  &
is.na(Turf) &
is.na(`Porites lobata`) == FALSE &
is.na(`Pocillopora verrucosa`) == FALSE ~ "Coral",
is.na(`Dictyota`) == FALSE &
is.na(CCA)  &
is.na(Turf) == FALSE &
is.na(`Porites lobata`) &
is.na(`Pocillopora verrucosa`) ~ "Fleshy Algae",
is.na(CCA)  &
is.na(Dictyota) &
is.na(Turf) == FALSE &
is.na(`Pocillopora verrucosa`)  &
is.na(`Porites lobata`) ~ "Turf",
number_exudate_organisms > 3 ~ "Primary Producers",
TRUE ~ "Cosmo"))
View(dunnett_micro_analysis)
all.pbd <- read.pdb("~/Documents/SDSU/UCSD/Bioinformatics/Classes/Class_12/")
all.pbd <- read.pdb("~/Documents/SDSU/UCSD/Bioinformatics/Classes/Class_12/all.pdbqt")
all.pbd <- read.pdb("~/Documents/SDSU/UCSD/Bioinformatics/Classes/Class_12/all.pdbqt", multi = TRUE)
library(bio3d)
library(tidyverse)
all.pbd <- read.pdb("~/Documents/SDSU/UCSD/Bioinformatics/Classes/Class_12/all.pdbqt", multi = TRUE)
write.pdb(all.pbd, "results.pdb")
ori <- read.pdb("ligand.pdbqt")
ori <- read.pdb("ligand_1hsg.pdbqt")
rmsd(ori, all.pbd)
correlation_matrix[correlation_matrix == "-Inf"] <- NA
#Data manipulations
library(tidyverse)
library(data.table)
library(DescTools)
library(broom)
library(readxl)
library(multcomp)
library(CHNOSZ)
library(randomForest)
# PCoA and visualizations
library(vegan)
library(ape)
library(wesanderson)
library(RColorBrewer)
map <- purrr::map
select <- dplyr::select
tidy <- broom::tidy
rename <- dplyr::rename
# LOADING -- Dataframes ---------------------------------------------------
quant_df <- read_csv("Pn_Ex2_MASTERx_Canopus_quant.csv")
cat_df <- read_csv("Pn_Ex2_MASTERx_Canopus_categories_matrix_x.csv")
otu_df <- read_tsv("Irina_2018_16s_exp_GEL.swarm.tax")
otu_samples <- read_csv("Pn_16S_identifiers.csv")%>%
rename("sample_name" = "SampleID")%>%
rename("sample_code" = "OTU_name")
quant_stats <- quant_df%>%
gather(sample_code, asin, 2:41)%>%
rename("feature_number" = "SampleID")%>%
group_by(feature_number)%>%
filter(sum(asin) != 0)%>%
separate(sample_code, c("Experiment", "Organism", "biological_replicates", "DOM_fil",
"technical_replicates", "transformed"), sep = "_")
cat_stats <- cat_df%>%
gather(category, asin, 2:ncol(.))%>%
group_by(category)%>%
filter(sum(asin) != 0)%>%
rename(feature_number = 1)
## CLEANING -- OTU table -------------------------------------------------------------------
otu_clean <- otu_df%>%
select(-c(1:2))%>%
gather(sample_code, reads, 2:ncol(.))%>%
left_join(otu_samples, ., by = "sample_code")%>%
select(-sample_code)%>%
separate(taxonomy, c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "OTU"), sep = ";")%>%
mutate(Class = case_when(Class %like any% c("%uncultured%", "%unclassified%", "%unidentified%") ~ "unclassified",
TRUE ~ as.character(Class)),
Order = case_when(Class == "unclassified" ~ "",
TRUE ~ as.character(Order)),
Family = case_when(Class == "unclassified" ~ "",
TRUE ~ as.character(Family)),
Genus = case_when(Class == "unclassified" ~ "",
TRUE ~ as.character(Genus)),
OTU = case_when(Class == "unclassified" ~ "",
TRUE ~ as.character(OTU)),
Order = case_when(Order %like any% c("%uncultured%", "%unclassified%", "%unidentified%") ~ "unclassified",
TRUE ~ as.character(Order)),
Family = case_when(Order == "unclassified" ~ "",
TRUE ~ as.character(Family)),
Genus = case_when(Order == "unclassified" ~ "",
TRUE ~ as.character(Genus)),
OTU = case_when(Order == "unclassified" ~ "",
TRUE ~ as.character(OTU)),
Family = case_when(Family %like any% c("%uncultured%", "%unclassified%", "%unidentified%") ~ "unclassified",
TRUE ~ as.character(Family)),
Genus = case_when(Family == "unclassified" ~ "",
TRUE ~ as.character(Genus)),
OTU = case_when(Family == "unclassified" ~ "",
TRUE ~ as.character(OTU)),
Genus = case_when(Genus %like any% c("%uncultured%", "%unclassified%", "%unidentified%") ~ "unclassified",
TRUE ~ as.character(Genus)),
OTU = case_when(Genus == "unclassified" ~ "",
OTU %like any% c("%uncultured%", "%unclassified%", "%unidentified%") ~ "sp",
TRUE ~ as.character(OTU)))%>%
unite(Taxonomy, c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "OTU"), sep = ";")%>%
group_by(sample_name, Taxonomy)%>%
summarize_if(is.numeric, sum)%>%
ungroup()%>%
separate(Taxonomy, c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "OTU"), sep = ";")
## Making the stats dataframes for OTU, family and classes
otu_stats <- otu_clean%>%
unite(Taxonomy, c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "OTU"), sep = ";")%>%
group_by(sample_name)%>%
mutate(ra = reads/sum(reads),
asin = asin(sqrt(ra)))
family_stats <- otu_clean%>%
select(-c(Genus, OTU))%>%
unite(Taxonomy, c("Kingdom", "Phylum", "Class", "Order", "Family"), sep = ";")%>%
group_by(sample_name, Taxonomy)%>%
summarize_if(is.numeric, sum)%>%
ungroup()%>%
group_by(sample_name)%>%
mutate(ra = reads/sum(reads),
asin = asin(sqrt(ra)))
class_stats <- otu_clean%>%
select(-c(Order, Family, Genus, OTU))%>%
unite(Taxonomy, c("Kingdom", "Phylum", "Class"), sep = ";")%>%
group_by(sample_name, Taxonomy)%>%
summarize_if(is.numeric, sum)%>%
ungroup()%>%
group_by(sample_name)%>%
mutate(ra = reads/sum(reads),
asin = asin(sqrt(ra)))
## Quant binary table and martix multiplication ---------------------------------------------
quant_binary <- quant_df%>%  ## Okay so here we are first making the data "tidy"
select(-c(42:ncol(.)))%>%
gather(feature, asin, 2:ncol(.))%>% # This gather command turns a datframe with lots of columns into a lot of rows so that all of the nuymerical response data will be in a single column
group_by(feature)%>%
mutate(binary = case_when(asin > .1*max(asin)~ 1,
TRUE ~ 0))%>%
ungroup()%>%
select(-asin)%>%
spread(SampleID, binary)%>%
column_to_rownames("feature")%>%
data.matrix(rownames.force = NA)
cat_clean <- cat_df%>%
column_to_rownames("FeatureID")%>%
data.matrix(rownames.force = NA)
matrix_multiplied <- quant_binary%*%cat_clean%>%
as.data.frame()%>%
rownames_to_column(var = "sample_code")%>%
gather(category, mult, 2:ncol(.))%>%
mutate(log10 = log10(mult))%>%
select(-mult)%>%
spread(category, log10)
## Doing this between OTU and multiplied matrix
correlation_matrix <- matrix_multiplied%>%
separate(sample_code, c("Experiment", "Organism",
"biological_replicates", "DOM_fil",
"technical_replicates", "transformed"), sep = "_")%>%
select(-c(technical_replicates, transformed))%>%
group_by(Experiment, Organism, biological_replicates, DOM_fil)%>%
summarise_if(is.numeric, sum)%>%
ungroup()%>%
unite(sample_name, c("Experiment",
"Organism",
"biological_replicates"),
sep = "_")
correlation_matrix[correlation_matrix == "-Inf"] <- NA
View(correlation_matrix)
correlation_otu <- otu_stats%>%
select(-c(reads, ra))%>%
spread(Taxonomy, asin)
correlation_table <- correlation_matrix%>%
group_by(DOM_fil)%>%
nest()%>%
mutate(data = map(data, ~ left_join(.x, correlation_otu, by = "sample_name")%>%
gather(otu, otu_asin, contains(";"))%>%
gather(category, category_asin, 2:1312)))
correlation_pvals <- correlation_table%>%
unnest(data)%>%
ungroup()%>%
group_by(DOM_fil, otu, category)%>%
nest()%>%
mutate(corr = map(data, ~ cor.test(.x$category_asin, .x$otu_asin, method = "pearson")%>%
broom::tidy()))%>%
dplyr::select(-data)%>%
unnest(corr)%>%
mutate(FDR = p.adjust(p.value, method = "BH"))
correlation_pvals <- correlation_table%>%
unnest(data)%>%
ungroup()%>%
group_by(DOM_fil, otu, category)%>%
nest()
View(correlation_pvals[[2]][1])
View(correlation_pvals[[2]])
correlation_pvals <- correlation_table%>%
unnest(data)%>%
ungroup()%>%
group_by(DOM_fil, otu, category)
View(correlation_pvals)
correlation_pvals <- correlation_table%>%
unnest(data)%>%
ungroup()%>%
group_by(DOM_fil, otu, category)%>%
nest()
View(correlation_pvals)
View(correlation_pvals[[4]][[1]])
View(correlation_pvals[[4]][[41]])
View(correlation_pvals[[4]][[41]])
correlation_pvals <- correlation_table%>%
unnest(data)%>%
ungroup()%>%
group_by(DOM_fil, otu, category)%>%
filter(sum(category_asin > 0))%>%
nest()%>%
mutate(corr = map(data, ~ cor.test(.x$category_asin, .x$otu_asin, method = "pearson")%>%
broom::tidy()))%>%
dplyr::select(-data)%>%
unnest(corr)%>%
mutate(FDR = p.adjust(p.value, method = "BH"))
correlation_pvals <- correlation_table%>%
unnest(data)%>%
ungroup()%>%
group_by(DOM_fil, otu, category)%>%
filter(sum(category_asin) > 0)%>%
nest()%>%
mutate(corr = map(data, ~ cor.test(.x$category_asin, .x$otu_asin, method = "pearson")%>%
broom::tidy()))%>%
dplyr::select(-data)%>%
unnest(corr)%>%
mutate(FDR = p.adjust(p.value, method = "BH"))
correlation_pvals <- correlation_table%>%
unnest(data)%>%
ungroup()%>%
group_by(DOM_fil, microbe, category)%>%
filter(sum(category_asin) > 0)%>%
nest()%>%
mutate(corr = map(data, ~ cor.test(.x$category_asin, .x$microbe_asin, method = "pearson")%>%
broom::tidy()))%>%
dplyr::select(-data)%>%
unnest(corr)%>%
mutate(FDR = p.adjust(p.value, method = "BH"))
correlation_table <- correlation_matrix%>%
group_by(DOM_fil)%>%
nest()%>%
mutate(data = map(data, ~ left_join(.x, correlation_microbe, by = "sample_name")%>%
gather(microbe, microbe_asin, contains(";"))%>%
gather(category, category_asin, 2:1312)))
correlation_microbe <- otu_stats%>%
select(-c(reads, ra))%>%
spread(Taxonomy, asin)
correlation_table <- correlation_matrix%>%
group_by(DOM_fil)%>%
nest()%>%
mutate(data = map(data, ~ left_join(.x, correlation_microbe, by = "sample_name")%>%
gather(microbe, microbe_asin, contains(";"))%>%
gather(category, category_asin, 2:1312)))
correlation_pvals <- correlation_table%>%
unnest(data)%>%
ungroup()%>%
group_by(DOM_fil, microbe, category)%>%
filter(sum(category_asin) > 0)%>%
nest()%>%
mutate(corr = map(data, ~ cor.test(.x$category_asin, .x$microbe_asin, method = "pearson")%>%
broom::tidy()))%>%
dplyr::select(-data)%>%
unnest(corr)%>%
mutate(FDR = p.adjust(p.value, method = "BH"))
library(BiocManager)
?hclust
?kmeans
?blast.pdb
library(bio3d)
seqs <- read_fasta(https://tinyurl.com/unk-seqs)
seqs <- read_fasta("https://tinyurl.com/unk-seqs")
seqs <- read.fasta("https://tinyurl.com/unk-seqs")
head(seqs)
View(seqds)
View(seqs)
blast <- seqs%>%
blast.pdb()
library(tidyverse)
blast <- seqs%>%
blast.pdb()
View(blast)
View(blast$hit.tbl)
pdb <- pdb.annotate("6MQN")
head(pdb)
head(pdb)
View(pdb)
gaps <- gap.inspect(seqs)
mutant.sites <- mutant.sites[mutant.sites %in% gaps$f.inds]
ide <- conserv(seqs$ali, method="identity")
mutant.sites <- which(ide < 1)
gaps <- gap.inspect(seqs)
mutant.sites <- mutant.sites[mutant.sites %in% gaps$f.inds]
mutant.sites
mutant.names <- paste0(seqs$ali["P53_wt",mutant.sites],
mutant.sites,
seqs$ali["P53_mutant",mutant.sites])
mutant.names <- paste0(seqs$ali["wt_healthy",mutant.sites],
mutant.sites,
seqs$ali["mutant_tumor",mutant.sites])
mutant.names <- paste0(seqs$ali["wt_healthy",mutant.sites],
mutant.sites,
seqs$ali["mutant_tumor",mutant.sites])
mutant.sites <- mutant.sites[mutant.sites %in% gaps$f.inds]
mutant.names <- paste0(seqs$ali["wt_healthy", mutant.sites],
mutant.sites,
seqs$ali["mutant_tumor",mutant.sites])
mutant.names
seqs$ali[12]
seqs$ali["mutant_tumor", mutant.sites]
seqs$ali["mutant_tumor", 12]
View(seqs)
mutant.names <- paste0(seqs$ali["wt", mutant.sites],
mutant.sites,
seqs$ali["mutant",mutant.sites])
mutant.names
View(odb)
View(pdb)
pdb[1,]$sequence
BiocManager::install( c("GenomicDataCommons", "TCGAbiolinks", "maftools", "msa") )
library(GenomicDataCommons)
library(TCGAbiolinks)
library(maftools)
samp <- getSampleFilesSummary("TCGA-BRCA")
setwd("~/Documents/GitHub/pseudonitzschia_Koester/Data/")
