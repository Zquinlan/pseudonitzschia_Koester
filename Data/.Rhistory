filter(FDR < 0.05)
aov_organism_sigs <- (aov_pvalues%>%
filter(!term == "DOM_fil"))$feature_number%>%
as.factor()%>%
unique()%>%
as.vector()
aov_DOM_fil_sigs <- (aov_pvalues%>%
filter(!term == "Organism"))$feature_number%>%
as.factor()%>%
unique()%>%
as.vector()
# STATS RANDOM FOREST -- QUANT Organism ----------------------------------------------
quant_org_rf_prep <- quant_stats%>%  ## Okay so here we are first making the data "tidy"
filter(feature_number %in% aov_organism_sigs)%>%
mutate(asin = as.numeric(asin))%>%
spread(feature_number, asin)%>%
select(-c(Experiment, biological_replicates, DOM_fil, technical_replicates))%>%
mutate(Organism = as.factor(Organism))
names(quant_org_rf_prep) <- make.names(names(quant_org_rf_prep))
quant_rf_org <- randomForest(Organism ~ ., quant_org_rf_prep,
importance = TRUE, proximity = TRUE, nPerm = 10,
ntree = 50000, na.action = na.exclude)
rf_quant_org_mda <- quant_rf_org$importance%>%
as.data.frame()%>%
rownames_to_column("feature")%>%
mutate(mean_decrease_important = case_when(MeanDecreaseAccuracy >= (top_n(., 30, MeanDecreaseAccuracy)%>%
arrange(-MeanDecreaseAccuracy))$MeanDecreaseAccuracy[30]~ "important",
TRUE ~ "not important"),
multiseries_important = case_when(`Pn-multiseries` >= (top_n(., 30, `Pn-multiseries`)%>%
arrange(-`Pn-multiseries`))$`Pn-multiseries`[30]~ "important",
TRUE ~ "not important"),
delicatissima_important = case_when(`Pn-delicatissima` >= (top_n(., 30, `Pn-delicatissima`)%>%
arrange(-`Pn-delicatissima`))$`Pn-delicatissima`[30]~ "important",
TRUE ~ "not important"),
galaxiae_important = case_when(`Pn-galaxiae` >= (top_n(., 30, `Pn-galaxiae`)%>%
arrange(-`Pn-galaxiae`))$`Pn-galaxiae`[30]~ "important",
TRUE ~ "not important"),
hasleana_important = case_when(`Pn-hasleana` >= (top_n(., 30, `Pn-hasleana`)%>%
arrange(-`Pn-hasleana`))$`Pn-hasleana`[30]~ "important",
TRUE ~ "not important"),
subpacifica_important = case_when(`Pn-subpacifica` >= (top_n(., 30, `Pn-subpacifica`)%>%
arrange(-`Pn-subpacifica`))$`Pn-subpacifica`[30]~ "important",
TRUE ~ "not important"))
write_csv(rf_quant_org_mda, "Analyzed/RF_quant_organism.csv")
# STATS RANDOM FOREST -- QUANT unfilfil  -----------------------------------------
quant_dom_rf_prep <- quant_stats%>%  ## Okay so here we are first making the data "tidy"
filter(feature_number %in% aov_DOM_fil_sigs)%>%
mutate(asin = as.numeric(asin))%>%
spread(feature_number, asin)%>%
select(-c(Experiment, biological_replicates, Organism, technical_replicates))%>%
mutate(DOM_fil = as.factor(DOM_fil))
names(quant_dom_rf_prep) <- make.names(names(quant_dom_rf_prep))
quant_rf_dom <- randomForest(DOM_fil ~ ., quant_dom_rf_prep,
importance = TRUE, proximity = TRUE, nPerm = 10,
ntree = 50000, na.action = na.exclude)
rf_quant_dom_mda <- quant_rf_dom$importance%>%
as.data.frame()%>%
rownames_to_column("feature")%>%
mutate(mean_decrease_important = case_when(MeanDecreaseAccuracy >= (top_n(., 30, MeanDecreaseAccuracy)%>%
arrange(-MeanDecreaseAccuracy))$MeanDecreaseAccuracy[30] ~ "important",
TRUE ~ "not important"))
write_csv(rf_quant_dom_mda, "Analyzed/RF_quant_dom.csv")
# STATS RANDOM FOREST -- OTUs ---------------------------------------------
sig_otu <- otu_aov$Taxonomy%>%
as.vector()
otu_rf_df <- otu_stats%>%
filter(Taxonomy %in% sig_otu)%>%
select(-c(reads, ra))%>%
mutate(Taxonomy = gsub(";", "_", Taxonomy),
Taxonomy = gsub(" ", "SPACE", Taxonomy),
Taxonomy = gsub("-", "LINE", Taxonomy))%>%
spread(Taxonomy, asin)%>%
separate(sample_code_16S, c("Experiment", "Organism",
"biological_replicates", "technical_replicates"), sep = "_")%>%
filter(Experiment == "Exp2")%>%
select(-c(Experiment, biological_replicates, technical_replicates))%>%
mutate(Organism = as.factor(Organism))
names(otu_rf_df) <- make.names(names(otu_rf_df))
otu_rf <- randomForest(Organism ~ ., otu_rf_df,
importance = TRUE, proximity = TRUE, nPerm = 10,
ntree = 50000, na.action = na.exclude)
otu_rf_mda <- otu_rf$importance%>%
as.data.frame()%>%
rownames_to_column("feature")%>%
mutate(mean_decrease_important = case_when(MeanDecreaseAccuracy >= (top_n(., 30, MeanDecreaseAccuracy)%>%
arrange(-MeanDecreaseAccuracy))$MeanDecreaseAccuracy[30]~ "important",
TRUE ~ "not important"))
important_org_otu <- (otu_rf_mda%>%
mutate(feature = gsub("_", ";", feature),
feature = gsub("SPACE", " ", feature),
feature = gsub("LINE", "-", feature))%>%
top_n(30, MeanDecreaseAccuracy))$feature%>%
unique()%>%
as.vector()
write_csv(otu_rf_mda, "Analyzed/Otu_rf_mda.csv")
# POST-STATS -- MINI Quant Table organism ---------------------------------------------------
important_quant_org <- (rf_quant_org_mda%>%
mutate(feature = gsub("X", "", feature))%>%
filter(MeanDecreaseAccuracy >= mean(MeanDecreaseAccuracy) + sd(MeanDecreaseAccuracy)))$feature%>%
as.vector()
mini_quant_org <-quant_stats%>%
filter(feature_number %in% important_quant_org)%>%
spread(feature_number, asin)
write_csv(mini_quant_org, "Analyzed/mini_quant_org.csv")
# POST-STATS -- Mini Quant Table unfil ------------------------------------------
important_quant_dom <- (rf_quant_dom_mda%>%
mutate(feature = gsub("X", "", feature))%>%
filter(MeanDecreaseAccuracy >= mean(MeanDecreaseAccuracy) + sd(MeanDecreaseAccuracy)))$feature%>%
as.vector()
mini_quant_dom <- quant_stats%>%
filter(feature_number %in% important_quant_dom)%>%
spread(feature_number, asin)
write_csv(mini_quant_dom, "Analyzed/mini_quant_dom.csv")
# POST-STATS -- Mini RF Table OTUs -------------------------------------
important_quant_otu <- (otu_rf_mda%>%
mutate(feature = gsub("X", "", feature))%>%
filter(MeanDecreaseAccuracy >= mean(MeanDecreaseAccuracy) + sd(MeanDecreaseAccuracy)))$feature%>%
as.vector()
mini_quant_otu <- quant_stats%>%
filter(feature_number %in% important_quant_otu)%>%
spread(feature_number, asin)
write_csv(mini_quant_otu, "Analyzed/mini_quant_otu.csv")
# PRE-MATRIX QUANT AND CAT -- Organism ---------------------------------------------
rf_sd <- (rf_quant_org_mda%>%
filter(MeanDecreaseAccuracy >= mean(MeanDecreaseAccuracy) + sd(MeanDecreaseAccuracy))%>%
mutate(feature = gsub("X", "", feature)))$feature%>%
as.vector()
cat_clean_org <- cat_stats%>%
filter(FeatureID %in% rf_sd)%>%
column_to_rownames("FeatureID")%>%
data.matrix(rownames.force = NA)
canopus_available_features_org <- rownames(cat_clean_org)%>% as.vector()
quant_binary_org <- quant_stats%>%  ## Okay so here we are first making the data "tidy"
filter(feature_number %in% canopus_available_features_org)%>%
unite(feature, c("Experiment", "Organism", "biological_replicates", "DOM_fil",
"technical_replicates"), sep = "_")%>%
group_by(feature)%>%
mutate(binary = case_when(asin > 0.01*max(asin) ~ 1,
TRUE ~ 0))%>%
ungroup()%>%
select(-asin)%>%
spread(feature_number, binary)%>%
column_to_rownames("feature")%>%
data.matrix(rownames.force = NA)
# PRE-MATRIX QUANT AND CAT -- DOM_Fil ---------------------------------------------
cat_clean_dom <- cat_stats%>%
filter(FeatureID %in% aov_DOM_fil_sigs)%>%
column_to_rownames("FeatureID")%>%
data.matrix(rownames.force = NA)
canopus_available_features_dom <- rownames(cat_clean_dom)%>% as.vector()
quant_binary_dom <- quant_stats%>%  ## Okay so here we are first making the data "tidy"
filter(feature_number %in% canopus_available_features_dom)%>%
unite(feature, c("Experiment", "Organism", "biological_replicates", "DOM_fil",
"technical_replicates"), sep = "_")%>%
group_by(feature)%>%
mutate(binary = case_when(asin > 0.01*max(asin) ~ 1,
TRUE ~ 0))%>%
ungroup()%>%
select(-asin)%>%
spread(feature_number, binary)%>%
column_to_rownames("feature")%>%
data.matrix(rownames.force = NA)
# MATRIX MULTIPLICATION --  Organism--------------------------------------------
matrix_multiplied_org <- quant_binary_org%*%cat_clean_org%>%
as.data.frame()%>%
rownames_to_column(var = "sample_code")%>%
gather(category, mult, 2:ncol(.))%>%
filter(category != "DBE-O")%>%
mutate(log10 = log10(mult + 1))%>%
select(-mult)%>%
spread(category, log10)
multi_matrix_tidy_org <- matrix_multiplied_org%>%
gather(category, mult, 2:ncol(.))%>%
separate(sample_code, c("Experiment", "Organism", "biological_replicates", "DOM_fil",
"technical_replicates"), sep = "_")
# MATRIX MULTIPLICATION -- DOM_Fil--------------------------------------------
matrix_multiplied_dom <- quant_binary_dom%*%cat_clean_dom%>%
as.data.frame()%>%
rownames_to_column(var = "sample_code")%>%
gather(category, mult, 2:ncol(.))%>%
filter(category != "DBE-O")%>%
mutate(log10 = log10(mult + 1))%>%
select(-mult)%>%
spread(category, log10)
multi_matrix_tidy_dom <- matrix_multiplied_dom%>%
gather(category, mult, 2:ncol(.))%>%
separate(sample_code, c("Experiment", "Organism", "biological_replicates", "DOM_fil",
"technical_replicates"), sep = "_")
# STATS ANOVA -- org matrix -----------------------------------------------
aov_matrix_org <- multi_matrix_tidy_org%>%
group_by(category)%>%
nest()%>%
mutate(data = map(data, ~ aov(mult ~ Organism, .x)%>%
tidy()))%>%
unnest(data)%>%
ungroup()%>%
mutate(FDR = p.adjust(p.value, method = "BH"))%>%
filter(FDR < 0.05)
matrix_aov_org_sig <- aov_matrix_org$category%>%
as.vector()
write_csv(aov_matrix_org, "Analyzed/anova_pvals_matrix_org.csv")
# STATS ANOVA -- dom matrix -----------------------------------------------
aov_matrix_dom <- multi_matrix_tidy_dom%>%
group_by(category)%>%
nest()%>%
mutate(data = map(data, ~ aov(mult ~ DOM_fil, .x)%>%
tidy()))%>%
unnest(data)%>%
ungroup()%>%
mutate(FDR = p.adjust(p.value, method = "BH"))%>%
filter(FDR < 0.05)
matrix_aov_dom_sig <- aov_matrix_dom$category%>%
as.vector()
write_csv(aov_matrix_org, "Analyzed/anova_pvals_matrix_dom.csv")
# STATS RANDOM FOREST -- Matrix  Organism-------------------------------------------
multi_matrix_random_forest_df <- multi_matrix_tidy_org%>%
filter(category %in% matrix_aov_org_sig)%>%
spread(category, mult)%>%
select(c(Organism, 7:ncol(.)))%>%
mutate(Organism = as.factor(Organism))
names(multi_matrix_random_forest_df) <- make.names(names(multi_matrix_random_forest_df))
rf_matrix <- randomForest(Organism ~ ., multi_matrix_random_forest_df,
importance = TRUE, proximity = TRUE, nPerm = 10,
ntree = 50000, na.action = na.exclude)
top30_org <- (rf_matrix$importance%>%
as.data.frame()%>%
rownames_to_column("feature")%>%
top_n(30, MeanDecreaseAccuracy))$feature%>%
as.vector()
rf_matrix_mda_org <- rf_matrix$importance%>%
as.data.frame()%>%
rownames_to_column("feature")%>%
mutate(mean_decrease_important = case_when(feature %like any% top30_org ~ "important",
TRUE ~ "not important"),
multiseries_important = case_when(`Pn-multiseries` >= (top_n(., 10, `Pn-multiseries`)%>%
arrange(-`Pn-multiseries`))$`Pn-multiseries`[10]~ "important",
TRUE ~ "not important"),
delicatissima_important = case_when(`Pn-delicatissima` >= (top_n(., 10, `Pn-delicatissima`)%>%
arrange(-`Pn-delicatissima`))$`Pn-delicatissima`[10]~ "important",
TRUE ~ "not important"),
galaxiae_important = case_when(`Pn-galaxiae` >= (top_n(., 10, `Pn-galaxiae`)%>%
arrange(-`Pn-galaxiae`))$`Pn-galaxiae`[10]~ "important",
TRUE ~ "not important"),
hasleana_important = case_when(`Pn-hasleana` >= (top_n(., 10, `Pn-hasleana`)%>%
arrange(-`Pn-hasleana`))$`Pn-hasleana`[10]~ "important",
TRUE ~ "not important"),
subpacifica_important = case_when(`Pn-subpacifica` >= (top_n(., 10, `Pn-subpacifica`)%>%
arrange(-`Pn-subpacifica`))$`Pn-subpacifica`[10]~ "important",
TRUE ~ "not important"))
write_csv(rf_matrix_mda_org,"./Analyzed/RF_matrix_organism_mda.05.csv")
#ggplot(rf_matrix_mda_org, aes(x= reorder(feature, -MeanDecreaseAccuracy), y = MeanDecreaseAccuracy)) +
geom_point(stat = "identity")
# STATS RANDOM FOREST -- Matrix  Fil_Unfil -------------------------------------------
multi_matrix_random_forest_UnfilFil_df <- multi_matrix_tidy_dom%>%
filter(category %in% matrix_aov_dom_sig)%>%
mutate(category = gsub("-", "LINE", category),
category = gsub(" ", "SPACE", category))%>%
spread(category,mult)%>%
select(c(DOM_fil, 7:ncol(.)))%>%
mutate(DOM_fil = as.factor(DOM_fil))
names(multi_matrix_random_forest_UnfilFil_df) <- make.names(names(multi_matrix_random_forest_UnfilFil_df))
rf_matrix_UnfilFil <- randomForest(DOM_fil ~ ., multi_matrix_random_forest_UnfilFil_df,
importance = TRUE, proximity = TRUE,
ntree = 50000, na.action=na.exclude)
top30_unfil <- (rf_matrix_UnfilFil$importance%>%
as.data.frame()%>%
rownames_to_column("feature")%>%
mutate(feature = gsub("LINE", "-", feature),
feature = gsub("SPACE", " ", feature))%>%
top_n(30, MeanDecreaseAccuracy))$feature%>%
as.vector()
rf_matrix_UnfilFil_mda <- rf_matrix_UnfilFil$importance%>%
as.data.frame()%>%
rownames_to_column("feature")%>%
mutate(mean_decrease_important = case_when(feature %like any% top30_unfil ~ "important",
TRUE ~ "not important"),
dom_mda_important = case_when(DOM >= (top_n(., 15, DOM)%>%
arrange(-DOM))$DOM[15]~ "important",
TRUE ~ "not important"),
filt_mda_important = case_when(Unfil >= (top_n(., 15, Unfil)%>%
arrange(-Unfil))$Unfil[15]~ "important",
TRUE ~ "not important"))
write_csv(rf_matrix_UnfilFil_mda,"./Analyzed/RF_matrix_UnfilFil_mda.05.csv")
ggplot(rf_matrix_UnfilFil_mda, aes(x= reorder(feature, -MeanDecreaseAccuracy), y = MeanDecreaseAccuracy)) +
geom_point(stat = "identity")
# STATS PERMANOVA - org and unfilfil  ---------------------------------------------------
matrix_permanova_org <- matrix_multiplied_org%>%
gather(category, mult, 2:ncol(.))%>%
mutate(mult = mult +1)%>%
spread(category, mult)%>%
separate(sample_code, c("Experiment", "Organism", "biological_replicates", "DOM_fil",
"technical_replicates"), sep = "_")
permanova_org <- matrix_permanova_org%>%
# column_to_rownames("sample_code")%>%
adonis(.[7:ncol(.)] ~ Organism*DOM_fil, ., perm = 1000, method = "bray", na.rm = TRUE)
permanova_org
matrix_permanova_dom <- matrix_multiplied_dom%>%
gather(category, mult, 2:ncol(.))%>%
mutate(mult = mult +1)%>%
spread(category, mult)%>%
separate(sample_code, c("Experiment", "Organism", "biological_replicates", "DOM_fil",
"technical_replicates"), sep = "_")
permanova_dom <- matrix_permanova_dom%>%
# column_to_rownames("sample_code")%>%
adonis(.[7:ncol(.)] ~ Organism*DOM_fil, ., perm = 1000, method = "bray", na.rm = TRUE)
permanova_dom
# POST-STATS -- mini-matrix organism -----------------------------------------------
important_org_compounds <- (rf_matrix_mda_org%>%
mutate(feature = gsub("X", "", feature))%>%
top_n(30, MeanDecreaseAccuracy))$feature%>%
unique()%>%
as.vector()
mini_matrix_org <- matrix_multiplied_org%>%
gather(feature, val, 2:ncol(.))%>%
mutate(feature = gsub("[[:space:]]", ".", feature))%>%
mutate(feature = gsub("-", ".", feature))%>%
filter(feature %in% important_org_compounds)%>%
spread(feature, val)
write_csv(mini_matrix_org, "Analyzed/mini_matrix_important_org.csv")
# STATS - T-TEST Important features org ---------------------------------------
feature_info_test <- feature_info%>%
gather(variable, response, 2:ncol(.))%>%
mutate(importance = case_when(feature_number %in% important_quant_org ~ "important",
TRUE ~ "not"),
importance = as.factor(importance))%>%
group_by(variable)%>%
nest()%>%
mutate(data = map(data, ~ t.test(.x$response ~ .x$importance, alternative = "greater")),
p_value = map(data, ~ .x["p.value"][[1]]))%>%
select(-data)%>%
ungroup()%>%
mutate(p_value = as.numeric(p_value),
FDR = p.adjust(p_value, method = "BH"))
write_csv(feature_info_test, "Analyzed/Ttest_elements_org.csv")
# STATS - T-TEST Important features DOM ---------------------------------------
feature_info_test_dom <- feature_info%>%
gather(variable, response, 2:ncol(.))%>%
mutate(importance = case_when(feature_number %in% important_quant_dom ~ "important",
TRUE ~ "not"),
importance = as.factor(importance))%>%
group_by(variable)%>%
nest()%>%
mutate(data = map(data, ~ t.test(.x$response ~ .x$importance, alternative = "greater")),
p_value = map(data, ~ .x["p.value"][[1]]))%>%
select(-data)%>%
ungroup()%>%
mutate(p_value = as.numeric(p_value),
FDR = p.adjust(p_value, method = "BH"))
write_csv(feature_info_test_dom, "Analyzed/Ttest_elements_dom.csv")
# STATS Correlation analysis ----------------------------------------------
## Correlation analysis
## Doing this between OTU and multiplied matrix
correlation_matrix <- matrix_multiplied_org%>%
gather(compound, val, 2:ncol(.))%>%
mutate(compound = gsub("[[:space:]]", ".", compound))%>%
mutate(compound = gsub("-", ".", compound))%>%
filter(compound %in% important_org_compounds)%>%
spread(compound, val)%>%
separate(sample_code, c("Experiment", "Organism", "biological_replicates", "DOM_fil",
"technical_replicates"), sep = "_")%>%
select(-c(Experiment, technical_replicates))%>%
group_by(Organism, biological_replicates, DOM_fil)%>%
summarize_if(is.numeric, mean)%>%
ungroup()
correlation_microbe <- otu_stats%>%
filter(sample_code_16S %like% "%Exp2%")%>%
rename('sample_name' = 'sample_code_16S')%>%
filter(Taxonomy %like any% sig_otu)%>%
select(-c(reads, ra))%>%
spread(Taxonomy, asin)
correlation_table <- correlation_matrix%>%
filter(DOM_fil != 'Unfil')%>%
mutate(Experiment = 'Exp2')%>%
unite(sample_name, c("Experiment", "Organism", "biological_replicates"), sep = "_")%>%
left_join(correlation_microbe%>%
mutate(sample_name = gsub('.{2}$', "", sample_name)), by = "sample_name")%>%
gather(microbe, microbe_asin, contains(";"))%>%
gather(category, category_asin, 3:32)
correlation_pvals <- correlation_table%>%
ungroup()%>%
group_by(DOM_fil, microbe, category)%>%
filter(sum(category_asin) > 0)%>%
nest()%>%
mutate(corr = map(data, ~ cor.test(.x$category_asin, .x$microbe_asin, method = "pearson")%>%
broom::tidy()))%>%
dplyr::select(-data)%>%
unnest(corr)%>%
ungroup()%>%
mutate(FDR = p.adjust(p.value, method = "BH"))
write_csv(correlation_pvals, "Analyzed/correlation_analysis.csv")
# POST-STATS -- mini-matrix unfilfil -----------------------------------------------
important_unfil_compounds <- (rf_matrix_UnfilFil_mda%>%
mutate(feature = gsub("LINE", "-", feature),
feature = gsub("SPACE", " ", feature))%>%
top_n(30, MeanDecreaseAccuracy))$feature%>%
unique()%>%
as.vector()
mini_matrix_dom <- matrix_multiplied_dom%>%
gather(feature, val, 2:ncol(.))%>%
mutate(feature = gsub("[[:space:]]", ".", feature))%>%
filter(feature %in% important_unfil_compounds)%>%
spread(feature, val)
write_csv(mini_matrix_dom, "Analyzed/mini_matrix_important_dom.csv")
# POST STATS -- matrix for HC ---------------------------------------------
otu_hc <- otu_stats%>%
filter(Taxonomy %in% important_org_otu)%>%
group_by(Taxonomy)%>%
filter(sample_code_16S %like% "Exp2%")%>%
mutate(zscore = (asin - mean(asin))/sd(asin))%>%
select(-c(reads, ra, asin))%>%
ungroup()%>%
spread(Taxonomy, zscore)
# rename("sample_code" = "sample_code_16S")
compound_org_hc <- mini_matrix_org%>%
gather(category, asin, 2:ncol(.))%>%
separate(sample_code, c("Experiment", "Organism",
"biological_replicate", "DOM_fil",
"technical_replicate"), sep = "_")%>%
group_by(category)%>%
mutate(zscore = (asin - mean(asin))/sd(asin))%>%
ungroup()%>%
group_by(category, Organism, biological_replicate, DOM_fil)%>%
select(-technical_replicate)%>%
summarize_if(is.numeric, mean, na.rm = TRUE)%>%
ungroup()%>%
filter(DOM_fil == "DOM")%>%
select(-c(asin, DOM_fil))%>%
unite(sample, c("Organism", "biological_replicate"), sep = "_")%>%
spread(category, zscore)
# left_join(otu_hc, by = "sample_code")
compound_dom_hc <- mini_matrix_dom%>%
gather(category, asin, 2:ncol(.))%>%
separate(sample_code, c("Experiment", "Organism",
"biological_replicate", "DOM_fil",
"technical_replicate"), sep = "_")%>%
group_by(category)%>%
mutate(zscore = (asin - mean(asin))/sd(asin))%>%
ungroup()%>%
group_by(category, Organism, biological_replicate, DOM_fil)%>%
select(-technical_replicate)%>%
summarize_if(is.numeric, mean, na.rm = TRUE)%>%
ungroup()%>%
select(-c(asin))%>%
unite(sample, c("Organism", "biological_replicate", "DOM_fil"), sep = "_")%>%
spread(category, zscore)
# left_join(otu_hc, by = "sample_code")
feature_org_hc <- mini_quant_org%>%
gather(feature_number, asin, 6:ncol(.))%>%
group_by(feature_number)%>%
mutate(zscore = (asin - mean(asin))/sd(asin))%>%
ungroup()%>%
group_by(feature_number, Organism, biological_replicates, DOM_fil)%>%
select(-technical_replicates)%>%
summarize_if(is.numeric, mean)%>%
ungroup()%>%
filter(DOM_fil == "DOM")%>%
select(-c(asin, DOM_fil))%>%
left_join(lib_id%>%
select(feature_number, Compound_Name), by = "feature_number")%>%
unite(feature, c(feature_number, Compound_Name), sep = "_")%>%
unite(sample, c("Organism", "biological_replicates"), sep = "_")%>%
spread(feature, zscore)
feature_dom_hc <- mini_quant_dom%>%
gather(feature_number, asin, 6:ncol(.))%>%
group_by(feature_number)%>%
mutate(zscore = (asin - mean(asin))/sd(asin))%>%
ungroup()%>%
group_by(feature_number, Organism, biological_replicates, DOM_fil)%>%
select(-technical_replicates)%>%
summarize_if(is.numeric, mean)%>%
ungroup()%>%
select(-c(asin))%>%
unite(sample, c("Organism", "biological_replicates", "DOM_fil"), sep = "_")%>%
left_join(lib_id%>%
select(feature_number, Compound_Name), by = "feature_number")%>%
unite(feature, c(feature_number, Compound_Name), sep = "_")%>%
spread(feature, zscore)
write_csv(compound_org_hc, "Analyzed/compound_org_hc.csv")
write_csv(compound_dom_hc, "Analyzed/compound_dom_hc.csv")
write_csv(feature_org_hc, "Analyzed/feature_org_hc.csv")
write_csv(feature_dom_hc, "Analyzed/feature_dom_hc.csv")
top30_unfil
rf_matrix_UnfilFil_mda <- rf_matrix_UnfilFil$importance%>%
as.data.frame()%>%
rownames_to_column("feature")%>%
mutate(feature = gsub("LINE", "-", feature),
feature = gsub("SPACE", " ", feature))%>%
mutate(mean_decrease_important = case_when(feature %like any% top30_unfil ~ "important",
TRUE ~ "not important"),
dom_mda_important = case_when(DOM >= (top_n(., 15, DOM)%>%
arrange(-DOM))$DOM[15]~ "important",
TRUE ~ "not important"),
filt_mda_important = case_when(Unfil >= (top_n(., 15, Unfil)%>%
arrange(-Unfil))$Unfil[15]~ "important",
TRUE ~ "not important"))
# POST-STATS -- mini-matrix unfilfil -----------------------------------------------
important_unfil_compounds <- (rf_matrix_UnfilFil_mda%>%
mutate(feature = gsub("LINE", "-", feature),
feature = gsub("SPACE", " ", feature))%>%
top_n(30, MeanDecreaseAccuracy))$feature%>%
unique()%>%
as.vector()
mini_matrix_dom <- matrix_multiplied_dom%>%
gather(feature, val, 2:ncol(.))%>%
mutate(feature = gsub("[[:space:]]", ".", feature))%>%
filter(feature %in% important_unfil_compounds)%>%
spread(feature, val)
mini_matrix_dom <- matrix_multiplied_dom%>%
gather(feature, val, 2:ncol(.))%>%
# mutate(feature = gsub("[[:space:]]", ".", feature))%>%
filter(feature %in% important_unfil_compounds)%>%
spread(feature, val)
