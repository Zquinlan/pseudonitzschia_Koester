# LOADING -- Libraries ----------------------------------------------------
## Load in all of the data frames and libraries
#Data manipulations
library(tidyverse)
library(data.table)
library(DescTools)
library(broom)
library(readxl)
library(multcomp)
library(CHNOSZ)
library(randomForest)
# PCoA and visualizations
library(vegan)
library(ape)
library(wesanderson)
library(RColorBrewer)
# LOADING -- Functions ----------------------------------------------------
flag_background <- function(data,
min_val = 0.5,
blank_columns = match(names(select(data, contains("blank", ignore.case = TRUE))), names(data)),
sample_columns = match(names(select(data,-c(contains("blank", ignore.case = TRUE),"feature_number"))),
names(data)))
{
require("tidyverse")
data$max_blanks <- apply(data[blank_columns], 1, max)
data$mean_samples <- apply(data[sample_columns], 1, mean, na.rm = TRUE)
no_background <- data%>%
mutate(background_features = case_when(mean_samples*min_val > max_blanks ~ "real",
TRUE ~ "background"))%>%
dplyr::select(-c(max_blanks, mean_samples))
}
flag_transient <- function(data,
sample_columns = match(names(select(data, -contains("blank", ignore.case = TRUE))), names(data)),
noise_level = 2E5,
replication_number = 3)
{
require("tidyverse")
no_transient <- data%>%
add_column(samples_over_noise = rowSums(.[sample_columns] > noise_level), .before = 2)%>%
mutate(transient_features = case_when(samples_over_noise >= replication_number ~ "real",
TRUE ~ "transient"))%>%
dplyr::select(-samples_over_noise)
}
flag_transient <- function(data,
sample_columns = match(names(select(data, -contains("blank", ignore.case = TRUE))), names(data)),
noise_level = 3E5,
replication_number = 3)
{
require("tidyverse")
no_transient <- data%>%
add_column(samples_over_noise = rowSums(.[sample_columns] > noise_level), .before = 2)%>%
mutate(transient_features = case_when(samples_over_noise >= replication_number ~ "real",
TRUE ~ "transient"))%>%
dplyr::select(-samples_over_noise)
}
map <- purrr::map
select <- dplyr::select
tidy <- broom::tidy
rename <- dplyr::rename
# LOADING -- Dataframes ---------------------------------------------------
quant_raw <- read_csv("./Raw/quant_all.csv")%>%
select(-c(2:3))%>%
rename(feature_number = 1)
setwd("~/zach_r/pseudonitzschia_Koester/Data")
# LOADING -- Dataframes ---------------------------------------------------
quant_raw <- read_csv("./Raw/quant_all.csv")%>%
select(-c(2:3))%>%
rename(feature_number = 1)
sample_rename <- read_csv("./Raw/Rename_MS_SampleIDs.csv")%>%
rename(sample_code_ms = ID_MS,
sample_code = ID_new)
metadata_quant <- read_tsv("./Raw/Pn_metadata_table.tsv")%>%
mutate(filename = gsub("mzXML", "mzML", filename))
View(sample_rename)
cat_df <- read_csv("./Raw/Pn_Ex2_MASTERx_Canopus_categories_probability.csv")
chl <- read_xlsx("Raw/Pn_Ex2_Chlorophyll.xlsx")
View(chl)
feature_info <- read_csv("./Raw/Pn_Ex2_MASTERx_elements.csv")%>%
rename(feature_number = 1)
select(feature_number, everything())
feature_info <- read_csv("./Raw/Pn_Ex2_MASTERx_elements.csv")%>%
rename(feature_number = 1)
select(feature_number, everything())
feature_info <- read_csv("./Raw/Pn_Ex2_MASTERx_elements.csv")%>%
rename(feature_number = 1)
View(feature_info)
chl <- read_xlsx("Raw/Pn_Ex2_Chlorophyll.xlsx")
feature_info <- read_csv("./Raw/Pn_Ex2_MASTERx_elements.csv")%>%
rename(feature_number = 1)
select(feature_number, everything())
feature_info <- read_csv("./Raw/Pn_Ex2_MASTERx_elements.csv")%>%
rename(feature_number = 1)%>%
select(feature_number, everything())
View(feature_info)
feature_info <- read_csv("./Raw/Pn_Ex2_MASTERx_elements.csv")%>%
rename(feature_number = 1)
otu_df <- read_tsv("./Raw/Irina_2018_16s_exp_GEL.swarm.tax")
